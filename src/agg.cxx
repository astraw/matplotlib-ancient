/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypePrettyName  SWIG_Python_TypePrettyName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 
/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

typedef double (*py_objasdbl_conv)(PyObject *obj);

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);


#else


/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,                                  /* Number of items in variable part (ob_size) */
  (char *)"swigvarlink",              /* Type name (tp_name) */
  sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
  0,                                  /* Itemsize (tp_itemsize) */
  0,                                  /* Deallocator (tp_dealloc) */ 
  (printfunc) swig_varlink_print,     /* Print (tp_print) */
  (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
  (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
  0,                                  /* tp_compare */
  (reprfunc) swig_varlink_repr,       /* tp_repr */
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_sequence */
  0,                                  /* tp_as_mapping */
  0,                                  /* tp_hash */
  0,                                  /* tp_call */
  0,                                  /* tp_str */
  0,                                  /* tp_getattro */
  0,                                  /* tp_setattro */
  0,                                  /* tp_as_buffer */
  0,                                  /* tp_flags */
  0,                                  /* tp_doc */
  0,                                  /* tp_traverse */
  0,                                  /* tp_clear */
  0,                                  /* tp_richcompare */
  0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
  0,                                  /* tp_iter */
  0,                                  /* tp_iternext */
  0,                                  /* tp_methods */
  0,                                  /* tp_members */
  0,                                  /* tp_getset */
  0,                                  /* tp_base */
  0,                                  /* tp_dict */
  0,                                  /* tp_descr_get */
  0,                                  /* tp_descr_set */
  0,                                  /* tp_dictoffset */
  0,                                  /* tp_init */
  0,                                  /* tp_alloc */
  0,                                  /* tp_new */
  0,                                  /* tp_free */
  0,                                  /* tp_is_gc */
  0,                                  /* tp_bases */
  0,                                  /* tp_mro */
  0,                                  /* tp_cache */
  0,                                  /* tp_subclasses */
  0,                                  /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030200
  0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
  /* these must be last */
  0,                                  /* tp_alloc */
  0,                                  /* tp_free */
  0,                                  /* tp_maxalloc */
  0,                                  /*  tp_next */
#endif
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      if (constants[i].pvalue) {
	obj = PyString_FromString((char *) constants[i].pvalue);
      } else {
	Py_INCREF(Py_None);
	obj = Py_None;
      }
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t swig_types[0] 
#define  SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t swig_types[1] 
#define  SWIGTYPE_p_agg__order_abgr swig_types[2] 
#define  SWIGTYPE_p_stroke_t swig_types[3] 
#define  SWIGTYPE_p_agg__order_rgb swig_types[4] 
#define  SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t swig_types[5] 
#define  SWIGTYPE_p_agg__rgba16 swig_types[6] 
#define  SWIGTYPE_p_agg__rendering_buffer swig_types[7] 
#define  SWIGTYPE_p_agg__buffer swig_types[8] 
#define  SWIGTYPE_p_agg__trans_affine swig_types[9] 
#define  SWIGTYPE_p_agg__rect_d swig_types[10] 
#define  SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t swig_types[11] 
#define  SWIGTYPE_p_agg__order_argb swig_types[12] 
#define  SWIGTYPE_p_agg__trans_affine_translation swig_types[13] 
#define  SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type swig_types[14] 
#define  SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t swig_types[15] 
#define  SWIGTYPE_p_strokecurvetrans_t swig_types[16] 
#define  SWIGTYPE_p_stroketrans_t swig_types[17] 
#define  SWIGTYPE_p_curvetrans_t swig_types[18] 
#define  SWIGTYPE_p_stroketranscurve_t swig_types[19] 
#define  SWIGTYPE_p_strokecurve_t swig_types[20] 
#define  SWIGTYPE_p_transcurve_t swig_types[21] 
#define  SWIGTYPE_p_curve_t swig_types[22] 
#define  SWIGTYPE_p_rasterizer_scanline_aaT_t swig_types[23] 
#define  SWIGTYPE_p_agg__scanline_bin swig_types[24] 
#define  SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t swig_types[25] 
#define  SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t swig_types[26] 
#define  SWIGTYPE_p_agg__path_storage swig_types[27] 
#define  SWIGTYPE_p_agg__vcgen_stroke swig_types[28] 
#define  SWIGTYPE_p_double swig_types[29] 
#define  SWIGTYPE_p_agg__trans_affine_rotation swig_types[30] 
#define  SWIGTYPE_p_agg__rect swig_types[31] 
#define  SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t swig_types[32] 
#define  SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t swig_types[33] 
#define  SWIGTYPE_p_agg__rect_baseTint_t swig_types[34] 
#define  SWIGTYPE_p_agg__null_markers swig_types[35] 
#define  SWIGTYPE_p_p_agg__int8u swig_types[36] 
#define  SWIGTYPE_p_agg__int8u swig_types[37] 
#define  SWIGTYPE_p_agg__vertex_type swig_types[38] 
#define  SWIGTYPE_p_transpath_t swig_types[39] 
#define  SWIGTYPE_p_path_t swig_types[40] 
#define  SWIGTYPE_p_agg__rgba8__self_type swig_types[41] 
#define  SWIGTYPE_p_agg__rgba16__self_type swig_types[42] 
#define  SWIGTYPE_p_agg__rgba8 swig_types[43] 
#define  SWIGTYPE_p_agg__pixel64_type swig_types[44] 
#define  SWIGTYPE_p_agg__point_type swig_types[45] 
#define  SWIGTYPE_p_agg__cover_type swig_types[46] 
#define  SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t swig_types[47] 
#define  SWIGTYPE_p_agg__scanline_pTunsigned_char_t swig_types[48] 
#define  SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t swig_types[49] 
#define  SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t swig_types[50] 
#define  SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t swig_types[51] 
#define  SWIGTYPE_p_agg__rect_baseTdouble_t swig_types[52] 
#define  SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t swig_types[53] 
#define  SWIGTYPE_p_agg__conv_curveTagg__path_storage_t swig_types[54] 
#define  SWIGTYPE_p_agg__trans_affine_scaling swig_types[55] 
#define  SWIGTYPE_p_agg__filling_rule_e swig_types[56] 
#define  SWIGTYPE_p_agg__binary_data swig_types[57] 
#define  SWIGTYPE_p_char swig_types[58] 
#define  SWIGTYPE_p_agg__rgba swig_types[59] 
#define  SWIGTYPE_p_agg__rendering_buffer__row_data swig_types[60] 
#define  SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t swig_types[61] 
#define  SWIGTYPE_p_agg__scanline32_bin swig_types[62] 
#define  SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t swig_types[63] 
#define  SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t swig_types[64] 
#define  SWIGTYPE_p_span swig_types[65] 
#define  SWIGTYPE_p_agg__order_bgra swig_types[66] 
#define  SWIGTYPE_p_agg__rendering_buffer__span_data swig_types[67] 
#define  SWIGTYPE_p_agg__trans_affine_skewing swig_types[68] 
#define  SWIGTYPE_p_agg__order_bgr swig_types[69] 
#define  SWIGTYPE_p_agg__int16u swig_types[70] 
#define  SWIGTYPE_p_unsigned_char swig_types[71] 
#define  SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t swig_types[72] 
#define  SWIGTYPE_p_agg__order_rgba swig_types[73] 
static swig_type_info *swig_types[75];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _agg.so
  ------------------------------------------------*/
#define SWIG_init    init_agg

#define SWIG_name    "_agg"

/* Auxiliar swig  macros that appear in the header */

#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
#define SWIGSTATICINLINE(a) static inline a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) (new Type[(size)])
#define swig_delete(cptr) delete cptr
#define swig_delete_array(cptr) delete[] cptr
#define swig_const_cast(a,Type) const_cast<Type >(a)
#define swig_static_cast(a,Type) static_cast<Type >(a)
#define swig_reinterpret_cast(a,Type) reinterpret_cast<Type >(a)
#define swig_new_copy(ptr,Type) (new Type(*ptr))
#define swig_numeric_cast(a,Type) static_cast<Type >(a)

#else /* C case */

#define SWIGSTATICINLINE(a) static a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) ((Type*) malloc((size)*sizeof(Type)))
#define swig_delete(cptr) free((char*)cptr)
#define swig_delete_array(cptr) free((char*)cptr)
#define swig_const_cast(a,Type) (Type)(a)
#define swig_static_cast(a,Type) (Type)(a)
#define swig_reinterpret_cast(a,Type) (Type)(a)
#define swig_numeric_cast(a,Type) (Type)(a)
#define swig_new_copy(ptr,Type)  ((Type*)memcpy(malloc(sizeof(Type)),ptr,sizeof(Type)))

#endif /* __cplusplus */


/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_signed_SS_char PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


#include "agg_basics.h"
#include "agg_color_rgba.h"
#include "agg_pixfmt_rgba.h"
#include "agg_trans_affine.h"
#include "agg_path_storage.h"  
#include "agg_buffer.h"   // my own buffer wrapper
#include "agg_rendering_buffer.h"  
#include "agg_renderer_base.h"
#include "agg_math_stroke.h"
#include "agg_conv_stroke.h"
#include "agg_conv_transform.h"
#include "agg_conv_curve.h"
#include "agg_vcgen_stroke.h"  
#include "agg_rasterizer_scanline_aa.h"
#include "agg_renderer_scanline.h"
#include "agg_render_scanlines.h"
#include "agg_scanline_bin.h"
#include "agg_scanline_p.h"
#include "agg_span_interpolator_linear.h"


using namespace agg;

#include "agg_typedefs.h"
 

SWIGSTATICINLINE(int)
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a double is expected");
  }
  return 0;
}


SWIGSTATICINLINE(double)
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


#include <limits.h>


SWIGSTATICINLINE(int)
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' minimum %ld",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_long(PyObject * obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned long is expected");
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : 0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = swig_numeric_cast(v, unsigned int);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned int is expected");
  }
  return 0;    
}
#else
SWIGSTATICINLINE(unsigned int)
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGSTATICINLINE(unsigned int)
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGSTATICINLINE(PyObject*)
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGSTATICINLINE(PyObject* )
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(swig_numeric_cast(value,long)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGSTATICINLINE(int)
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a long is expected");
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : 0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = swig_numeric_cast(v, int);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an int is expected");
  }
  return 0;    
}
#else
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGSTATICINLINE(int)
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  /*  if (val) *val = PyObject_IsTrue(obj); return 1; */
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = (bool)res;
    return 1;
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a bool is expected");
  }
  return 0;
}


SWIGSTATICINLINE(bool)
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : 0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = swig_numeric_cast(v, unsigned char);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned char is expected");
  }
  return 0;
}


SWIGSTATICINLINE(unsigned char)
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : 0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = swig_numeric_cast(v, unsigned short);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned short is expected");
  }
  return 0;
}


SWIGSTATICINLINE(unsigned short)
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}


  static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;
    
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        o2 = target;
        target = PyTuple_New(1);
        PyTuple_SetItem(target, 0, o2);

        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}


void agg_row_ptr_cache_Sl_agg_int8u_Sg__attachb(agg::row_ptr_cache<agg::int8u > *self,agg::buffer *buf){
    self->attach(buf->data, buf->width, buf->height, buf->stride);
  }
void agg_renderer_base_Sl_pixfmt_rgba_t_Sg__clear_rgba8(agg::renderer_base<pixfmt_rgba_t > *self,agg::rgba8 const &color){
    self->clear(color);
  }
void agg_renderer_base_Sl_pixfmt_rgba_t_Sg__clear_rgba(agg::renderer_base<pixfmt_rgba_t > *self,agg::rgba const &color){
    self->clear(color);
  }
void agg_renderer_scanline_aa_solid_Sl_renderer_base_rgba_t_Sg__color_rgba8(agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *self,agg::rgba8 const &color){
    self->color(color);
  }
void agg_renderer_scanline_aa_solid_Sl_renderer_base_rgba_t_Sg__color_rgba(agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *self,agg::rgba const &color){
    self->color(color);
  }
void agg_renderer_scanline_bin_solid_Sl_renderer_base_rgba_t_Sg__color_rgba8(agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *self,agg::rgba8 const &color){
    self->color(color);
  }
void agg_renderer_scanline_bin_solid_Sl_renderer_base_rgba_t_Sg__color_rgba(agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *self,agg::rgba const &color){
    self->color(color);
  }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_pi_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable pi is read-only.");
    return 1;
}


static PyObject *_wrap_pi_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_From_double((double)agg::pi);
    return pyobj;
}


static PyObject *_wrap_deg2rad(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:deg2rad",&obj0)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (double)agg::deg2rad(arg1);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rad2deg(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rad2deg",&obj0)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (double)agg::rad2deg(arg1);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_vertex",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_vertex(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_stop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_stop",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_stop(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_move_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_move_to",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_move_to(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_line_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_line_to",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_line_to(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_curve(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve3",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_curve3(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve4",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_curve4(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_end_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_end_poly",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_end_poly(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_close(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_close",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_close(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_next_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_next_poly",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_next_poly(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_cw(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_cw",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_cw(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_ccw(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_ccw",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_ccw(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_oriented(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_oriented",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_oriented(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_closed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_closed",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)agg::is_closed(arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_get_close_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get_close_flag",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)agg::get_close_flag(arg1);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clear_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clear_orientation",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)agg::clear_orientation(arg1);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_get_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get_orientation",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)agg::get_orientation(arg1);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set_orientation",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)agg::set_orientation(arg1,arg2);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:point_type_x_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__point_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:point_type_x_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__point_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->x);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:point_type_y_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__point_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:point_type_y_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__point_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->y);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_point_type")) goto fail;
    result = (agg::point_type *)new agg::point_type();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__point_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::point_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_point_type",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::point_type *)new agg::point_type(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__point_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_point_type__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_point_type__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_point_type'");
    return NULL;
}


static PyObject *_wrap_delete_point_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_point_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__point_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * point_type_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__point_type, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_vertex_type_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_x_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_x_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->x);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_y_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_y_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->y);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_cmd_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_cmd_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->cmd = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_cmd_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_cmd_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int) ((arg1)->cmd);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vertex_type")) goto fail;
    result = (agg::vertex_type *)new agg::vertex_type();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vertex_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    unsigned int arg3 ;
    agg::vertex_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_vertex_type",&obj0,&obj1,&obj2)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::vertex_type *)new agg::vertex_type(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vertex_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vertex_type__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_new_vertex_type__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vertex_type'");
    return NULL;
}


static PyObject *_wrap_delete_vertex_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vertex_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vertex_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vertex_type_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__vertex_type, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rect_x1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_x1_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_x1_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int) ((arg1)->x1);
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_y1_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_y1_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int) ((arg1)->y1);
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_x2_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_x2_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int) ((arg1)->x2);
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_y2_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_y2_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int) ((arg1)->y2);
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rect")) goto fail;
    result = (agg::rect_base<int > *)new agg::rect_base<int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::rect_base<int > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_rect",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (int)SWIG_As_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rect_base<int > *)new agg::rect_base<int >(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rect__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_rect__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rect'");
    return NULL;
}


static PyObject *_wrap_rect_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    agg::rect_base<int >::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rect_base<int >::self_type const &_result_ref = (arg1)->normalize();
        result = (agg::rect_base<int >::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    agg::rect_base<int >::self_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_clip",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (bool)(arg1)->clip((agg::rect_base<int >::self_type const &)*arg2);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_is_valid(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_is_valid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((agg::rect_base<int > const *)arg1)->is_valid();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rect",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rect_baseTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rect_d_x1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_x1_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_x1_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->x1);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_y1_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_y1_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->y1);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_x2_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->x2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_x2_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->x2);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_y2_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->y2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_y2_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->y2);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rect_d")) goto fail;
    result = (agg::rect_base<double > *)new agg::rect_base<double >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    agg::rect_base<double > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_rect_d",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rect_base<double > *)new agg::rect_base<double >(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rect_d__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_new_rect_d__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rect_d'");
    return NULL;
}


static PyObject *_wrap_rect_d_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    agg::rect_base<double >::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rect_base<double >::self_type const &_result_ref = (arg1)->normalize();
        result = (agg::rect_base<double >::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    agg::rect_base<double >::self_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_clip",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (bool)(arg1)->clip((agg::rect_base<double >::self_type const &)*arg2);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_is_valid(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_is_valid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((agg::rect_base<double > const *)arg1)->is_valid();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rect_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rect_d",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_baseTdouble_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rect_d_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rect_baseTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_unite_rectangles(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect *arg1 = 0 ;
    agg::rect *arg2 = 0 ;
    agg::rect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:unite_rectangles",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::unite_rectangles<agg::rect >((agg::rect const &)*arg1,(agg::rect const &)*arg2);
    
    {
        agg::rect * resultptr;
        resultptr = new agg::rect((agg::rect &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_unite_rectangles_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_d *arg1 = 0 ;
    agg::rect_d *arg2 = 0 ;
    agg::rect_d result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:unite_rectangles_d",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_d,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect_d,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::unite_rectangles<agg::rect_d >((agg::rect_d const &)*arg1,(agg::rect_d const &)*arg2);
    
    {
        agg::rect_d * resultptr;
        resultptr = new agg::rect_d((agg::rect_d &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_d, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_intersect_rectangles(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect *arg1 = 0 ;
    agg::rect *arg2 = 0 ;
    agg::rect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:intersect_rectangles",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::intersect_rectangles<agg::rect >((agg::rect const &)*arg1,(agg::rect const &)*arg2);
    
    {
        agg::rect * resultptr;
        resultptr = new agg::rect((agg::rect &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_intersect_rectangles_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_d *arg1 = 0 ;
    agg::rect_d *arg2 = 0 ;
    agg::rect_d result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:intersect_rectangles_d",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rect_d,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect_d,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::intersect_rectangles<agg::rect_d >((agg::rect_d const &)*arg1,(agg::rect_d const &)*arg2);
    
    {
        agg::rect_d * resultptr;
        resultptr = new agg::rect_d((agg::rect_d &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_d, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_binary_data_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *arg1 = (agg::binary_data *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:binary_data_size_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__binary_data,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_binary_data_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *arg1 = (agg::binary_data *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:binary_data_size_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__binary_data,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int) ((arg1)->size);
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_binary_data_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *arg1 = (agg::binary_data *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:binary_data_data_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__binary_data,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_unsigned_char,
    SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) SWIG_fail;
    if (arg1) (arg1)->data = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_binary_data_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *arg1 = (agg::binary_data *) 0 ;
    unsigned char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:binary_data_data_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__binary_data,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned char *) ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_binary_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_binary_data")) goto fail;
    result = (agg::binary_data *)new agg::binary_data();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__binary_data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_binary_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::binary_data *arg1 = (agg::binary_data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_binary_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__binary_data,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * binary_data_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__binary_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_buffer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 = (bool) true ;
    agg::buffer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:new_buffer",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (bool)SWIG_As_bool(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (agg::buffer *)new agg::buffer(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__buffer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_buffer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_buffer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_to_string(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    agg::binary_data result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_to_string",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (arg1)->to_string();
    
    {
        resultobj = PyString_FromStringAndSize((const char*)(&result)->data,(&result)->size);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_width_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(unsigned int) ((arg1)->width);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_height_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(unsigned int) ((arg1)->height);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_stride_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_stride_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(unsigned int) ((arg1)->stride);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    agg::int8u *arg2 = (agg::int8u *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:buffer_data_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) SWIG_fail;
    if (arg1) (arg1)->data = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_data_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u *) ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_freemem_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:buffer_freemem_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (bool)SWIG_As_bool(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->freemem = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_buffer_freemem_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::buffer *arg1 = (agg::buffer *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:buffer_freemem_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool) ((arg1)->freemem);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * buffer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__buffer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_rgb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_rgb *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_rgb")) goto fail;
    result = (agg::order_rgb *)new agg::order_rgb();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_rgb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_rgb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_rgb *arg1 = (agg::order_rgb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_rgb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_rgb,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_rgb_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_rgb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_bgr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_bgr *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_bgr")) goto fail;
    result = (agg::order_bgr *)new agg::order_bgr();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_bgr, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_bgr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_bgr *arg1 = (agg::order_bgr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_bgr",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_bgr,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_bgr_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_bgr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_rgba *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_rgba")) goto fail;
    result = (agg::order_rgba *)new agg::order_rgba();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_rgba, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_rgba *arg1 = (agg::order_rgba *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_rgba, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_argb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_argb *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_argb")) goto fail;
    result = (agg::order_argb *)new agg::order_argb();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_argb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_argb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_argb *arg1 = (agg::order_argb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_argb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_argb,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_argb_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_argb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_abgr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_abgr *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_abgr")) goto fail;
    result = (agg::order_abgr *)new agg::order_abgr();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_abgr, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_abgr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_abgr *arg1 = (agg::order_abgr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_abgr",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_abgr,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_abgr_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_abgr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_order_bgra(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_bgra *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_order_bgra")) goto fail;
    result = (agg::order_bgra *)new agg::order_bgra();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__order_bgra, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_order_bgra(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::order_bgra *arg1 = (agg::order_bgra *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_order_bgra",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__order_bgra,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * order_bgra_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__order_bgra, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rgba_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_r_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->r = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_r_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->r);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_g_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_g_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->g = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_g_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_g_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->g);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_b_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_b_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->b = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_b_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_b_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->b);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_a_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_a_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_a_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_a_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double) ((arg1)->a);
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rgba")) goto fail;
    result = (agg::rgba *)new agg::rgba();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 = (double) 1.0 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:new_rgba",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (double)SWIG_As_double(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (agg::rgba *)new agg::rgba(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba *)new agg::rgba((agg::rgba const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_transparent(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_transparent",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba const &_result_ref = (arg1)->transparent();
        result = (agg::rgba *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_opacity__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_opacity",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba const &_result_ref = (arg1)->opacity(arg2);
        result = (agg::rgba *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_opacity__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_opacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::rgba const *)arg1)->opacity();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_opacity(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba_opacity__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba_opacity__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba_opacity'");
    return NULL;
}


static PyObject *_wrap_rgba_premultiply__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_premultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba const &_result_ref = (arg1)->premultiply();
        result = (agg::rgba *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_premultiply__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    double arg2 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_premultiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba const &_result_ref = (arg1)->premultiply(arg2);
        result = (agg::rgba *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_premultiply(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba_premultiply__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba_premultiply__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba_premultiply'");
    return NULL;
}


static PyObject *_wrap_rgba_demultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_demultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba const &_result_ref = (arg1)->demultiply();
        result = (agg::rgba *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_gradient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    agg::rgba arg2 ;
    double arg3 ;
    agg::rgba result;
    agg::rgba *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rgba_gradient",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::rgba const *)arg1)->gradient(arg2,arg3);
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_no_color(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba result;
    
    if(!PyArg_ParseTuple(args,(char *)":rgba_no_color")) goto fail;
    result = agg::rgba::no_color();
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_from_wavelength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 = (double) 1.0 ;
    agg::rgba result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:rgba_from_wavelength",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj1) {
        arg2 = (double)SWIG_As_double(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba::from_wavelength(arg1,arg2);
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 = (double) 1.0 ;
    agg::rgba *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:new_rgba",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj1) {
        arg2 = (double)SWIG_As_double(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (agg::rgba *)new agg::rgba(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rgba__SWIG_0(self,args);
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_rgba__SWIG_3(self,args);
            }
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_rgba__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_rgba__SWIG_2(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_rgba__SWIG_1(self,args);
                    }
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_new_rgba__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rgba'");
    return NULL;
}


static PyObject *_wrap_delete_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = (agg::rgba *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rgba, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rgba_pre__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 = (double) 1.0 ;
    agg::rgba result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:rgba_pre",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (double)SWIG_As_double(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba_pre(arg1,arg2,arg3,arg4);
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_pre__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    agg::rgba result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba_pre",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::rgba_pre((agg::rgba const &)*arg1);
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_pre__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba_pre((agg::rgba const &)*arg1,arg2);
    
    {
        agg::rgba * resultptr;
        resultptr = new agg::rgba((agg::rgba &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba_pre(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba_pre__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba_pre__SWIG_2(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_rgba_pre__SWIG_0(self,args);
                    }
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_rgba_pre__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba_pre'");
    return NULL;
}


static PyObject *_wrap_rgba8_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_r_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba8::value_type)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->r = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_r_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba8::value_type) ((arg1)->r);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_g_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_g_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba8::value_type)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->g = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_g_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_g_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba8::value_type) ((arg1)->g);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_b_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_b_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba8::value_type)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->b = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_b_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_b_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba8::value_type) ((arg1)->b);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_a_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_a_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba8::value_type)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_a_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_a_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba8::value_type) ((arg1)->a);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rgba8")) goto fail;
    result = (agg::rgba8 *)new agg::rgba8();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 = (unsigned int) agg::rgba8::base_mask ;
    agg::rgba8 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:new_rgba8",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (agg::rgba8 *)new agg::rgba8(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba8 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba8",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba8 *)new agg::rgba8((agg::rgba const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8::self_type *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba8 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba8",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8__self_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba8 *)new agg::rgba8((agg::rgba8::self_type const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    agg::rgba8 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_rgba8",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::rgba8 *)new agg::rgba8((agg::rgba const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba8(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rgba8__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_rgba8__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8__self_type, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_rgba8__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_rgba8__SWIG_2(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_rgba8__SWIG_1(self,args);
                    }
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_new_rgba8__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rgba8'");
    return NULL;
}


static PyObject *_wrap_rgba8_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_transparent(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_transparent",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba8::self_type const &_result_ref = (arg1)->transparent();
        result = (agg::rgba8::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_opacity__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    double arg2 ;
    agg::rgba8::self_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_opacity",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba8::self_type const &_result_ref = (arg1)->opacity(arg2);
        result = (agg::rgba8::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_opacity__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_opacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::rgba8 const *)arg1)->opacity();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_opacity(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba8_opacity__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba8_opacity__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba8_opacity'");
    return NULL;
}


static PyObject *_wrap_rgba8_premultiply__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_premultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba8::self_type const &_result_ref = (arg1)->premultiply();
        result = (agg::rgba8::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_premultiply__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    unsigned int arg2 ;
    agg::rgba8::self_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_premultiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba8::self_type const &_result_ref = (arg1)->premultiply(arg2);
        result = (agg::rgba8::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_premultiply(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba8_premultiply__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rgba8_premultiply__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba8_premultiply'");
    return NULL;
}


static PyObject *_wrap_rgba8_demultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_demultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba8::self_type const &_result_ref = (arg1)->demultiply();
        result = (agg::rgba8::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba8__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_gradient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    agg::rgba8::self_type *arg2 = 0 ;
    double arg3 ;
    agg::rgba8::self_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rgba8_gradient",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba8__self_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::rgba8 const *)arg1)->gradient((agg::rgba8::self_type const &)*arg2,arg3);
    
    {
        agg::rgba8::self_type * resultptr;
        resultptr = new agg::rgba8::self_type((agg::rgba8::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_no_color(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8::self_type result;
    
    if(!PyArg_ParseTuple(args,(char *)":rgba8_no_color")) goto fail;
    result = agg::rgba8::no_color();
    
    {
        agg::rgba8::self_type * resultptr;
        resultptr = new agg::rgba8::self_type((agg::rgba8::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_from_wavelength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 = (double) 1.0 ;
    agg::rgba8::self_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:rgba8_from_wavelength",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj1) {
        arg2 = (double)SWIG_As_double(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba8::from_wavelength(arg1,arg2);
    
    {
        agg::rgba8::self_type * resultptr;
        resultptr = new agg::rgba8::self_type((agg::rgba8::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rgba8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = (agg::rgba8 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rgba8",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rgba8_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rgba8, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rgba8_pre__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 = (unsigned int) agg::rgba8::base_mask ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:rgba8_pre",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba8_pre(arg1,arg2,arg3,arg4);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_pre__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_pre",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::rgba8_pre((agg::rgba8 const &)*arg1);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_pre__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba8_pre((agg::rgba8 const &)*arg1,arg2);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_pre__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba8_pre",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::rgba8_pre((agg::rgba const &)*arg1);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_pre__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba8_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba8_pre((agg::rgba const &)*arg1,arg2);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba8_pre(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba8_pre__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba8_pre__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rgba8_pre__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba8_pre__SWIG_4(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_rgba8_pre__SWIG_0(self,args);
                    }
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_rgba8_pre__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba8_pre'");
    return NULL;
}


static PyObject *_wrap_rgb8_packed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgb8_packed",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgb8_packed(arg1);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgr8_packed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgr8_packed",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::bgr8_packed(arg1);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_argb8_packed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    agg::rgba8 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:argb8_packed",&obj0)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::argb8_packed(arg1);
    
    {
        agg::rgba8 * resultptr;
        resultptr = new agg::rgba8((agg::rgba8 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba8, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_r_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba16::value_type)SWIG_As_unsigned_SS_short(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->r = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_r_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba16::value_type) ((arg1)->r);
    
    resultobj = SWIG_From_unsigned_SS_short((unsigned short)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_g_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_g_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba16::value_type)SWIG_As_unsigned_SS_short(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->g = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_g_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_g_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba16::value_type) ((arg1)->g);
    
    resultobj = SWIG_From_unsigned_SS_short((unsigned short)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_b_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_b_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba16::value_type)SWIG_As_unsigned_SS_short(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->b = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_b_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_b_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba16::value_type) ((arg1)->b);
    
    resultobj = SWIG_From_unsigned_SS_short((unsigned short)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_a_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_a_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::rgba16::value_type)SWIG_As_unsigned_SS_short(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_a_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_a_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::rgba16::value_type) ((arg1)->a);
    
    resultobj = SWIG_From_unsigned_SS_short((unsigned short)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rgba16")) goto fail;
    result = (agg::rgba16 *)new agg::rgba16();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 = (unsigned int) agg::rgba16::base_mask ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:new_rgba16",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (agg::rgba16 *)new agg::rgba16(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16::self_type *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba16",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16__self_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba16 *)new agg::rgba16((agg::rgba16::self_type const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_rgba16",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::rgba16 *)new agg::rgba16((agg::rgba const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba16",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba16 *)new agg::rgba16((agg::rgba const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_rgba16",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::rgba16 *)new agg::rgba16((agg::rgba8 const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba16 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_rgba16",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::rgba16 *)new agg::rgba16((agg::rgba8 const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rgba16(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rgba16__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_rgba16__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_rgba16__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_rgba16__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16__self_type, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_rgba16__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_rgba16__SWIG_6(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_rgba16__SWIG_1(self,args);
                    }
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_new_rgba16__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rgba16'");
    return NULL;
}


static PyObject *_wrap_rgba16_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_transparent(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_transparent",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba16::self_type const &_result_ref = (arg1)->transparent();
        result = (agg::rgba16::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_opacity__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    double arg2 ;
    agg::rgba16::self_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_opacity",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba16::self_type const &_result_ref = (arg1)->opacity(arg2);
        result = (agg::rgba16::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_opacity__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_opacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::rgba16 const *)arg1)->opacity();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_opacity(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba16_opacity__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba16_opacity__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba16_opacity'");
    return NULL;
}


static PyObject *_wrap_rgba16_premultiply__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_premultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba16::self_type const &_result_ref = (arg1)->premultiply();
        result = (agg::rgba16::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_premultiply__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    unsigned int arg2 ;
    agg::rgba16::self_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_premultiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::rgba16::self_type const &_result_ref = (arg1)->premultiply(arg2);
        result = (agg::rgba16::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_premultiply(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba16_premultiply__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rgba16_premultiply__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba16_premultiply'");
    return NULL;
}


static PyObject *_wrap_rgba16_demultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_demultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rgba16::self_type const &_result_ref = (arg1)->demultiply();
        result = (agg::rgba16::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rgba16__self_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_gradient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    agg::rgba16::self_type *arg2 = 0 ;
    double arg3 ;
    agg::rgba16::self_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rgba16_gradient",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba16__self_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::rgba16 const *)arg1)->gradient((agg::rgba16::self_type const &)*arg2,arg3);
    
    {
        agg::rgba16::self_type * resultptr;
        resultptr = new agg::rgba16::self_type((agg::rgba16::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_no_color(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16::self_type result;
    
    if(!PyArg_ParseTuple(args,(char *)":rgba16_no_color")) goto fail;
    result = agg::rgba16::no_color();
    
    {
        agg::rgba16::self_type * resultptr;
        resultptr = new agg::rgba16::self_type((agg::rgba16::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_from_wavelength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 = (double) 1.0 ;
    agg::rgba16::self_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:rgba16_from_wavelength",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj1) {
        arg2 = (double)SWIG_As_double(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba16::from_wavelength(arg1,arg2);
    
    {
        agg::rgba16::self_type * resultptr;
        resultptr = new agg::rgba16::self_type((agg::rgba16::self_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16__self_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rgba16(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = (agg::rgba16 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rgba16",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rgba16_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rgba16, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rgba16_pre__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 = (unsigned int) agg::rgba16::base_mask ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:rgba16_pre",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = (unsigned int)SWIG_As_unsigned_SS_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = agg::rgba16_pre(arg1,arg2,arg3,arg4);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba16 *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba16,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba16_pre((agg::rgba16 const &)*arg1,arg2);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_pre",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::rgba16_pre((agg::rgba const &)*arg1);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba *arg1 = 0 ;
    double arg2 ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba16_pre((agg::rgba const &)*arg1,arg2);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rgba16_pre",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = agg::rgba16_pre((agg::rgba8 const &)*arg1);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rgba8 *arg1 = 0 ;
    unsigned int arg2 ;
    agg::rgba16 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rgba16_pre",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = agg::rgba16_pre((agg::rgba8 const &)*arg1,arg2);
    
    {
        agg::rgba16 * resultptr;
        resultptr = new agg::rgba16((agg::rgba16 &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rgba16, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rgba16_pre(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba16_pre__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rgba16_pre__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_rgba16_pre__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba16, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rgba16_pre__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rgba8, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rgba16_pre__SWIG_5(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_rgba16_pre__SWIG_0(self,args);
                    }
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_rgba16_pre__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rgba16_pre'");
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_trans_affine")) goto fail;
    result = (agg::trans_affine *)new agg::trans_affine();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (double)SWIG_As_double(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine *)new agg::trans_affine(arg1,arg2,arg3,arg4,arg5,arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    agg::trans_affine *result;
    double temp1[6] ;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine",&obj0,&obj1)) goto fail;
    {
        int i;
        if (!PySequence_Check(obj0)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj0) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj0,i);
            if (PyFloat_Check(o)) {
                temp1[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp1[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg1 = &temp1[0];
    }
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    result = (agg::trans_affine *)new agg::trans_affine((double const *)arg1,(double const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    agg::trans_affine *result;
    double temp5[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj4)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj4) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj4,i);
            if (PyFloat_Check(o)) {
                temp5[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp5[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg5 = &temp5[0];
    }
    result = (agg::trans_affine *)new agg::trans_affine(arg1,arg2,arg3,arg4,(double const *)arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    agg::trans_affine *result;
    double temp1[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        int i;
        if (!PySequence_Check(obj0)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj0) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj0,i);
            if (PyFloat_Check(o)) {
                temp1[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp1[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg1 = &temp1[0];
    }
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine *)new agg::trans_affine((double const *)arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_trans_affine__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            {
                _v = (argv[1] != 0);
            }
            if (_v) {
                return _wrap_new_trans_affine__SWIG_2(self,args);
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        {
                            _v = (argv[4] != 0);
                        }
                        if (_v) {
                            return _wrap_new_trans_affine__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_new_trans_affine__SWIG_4(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                return _wrap_new_trans_affine__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_trans_affine'");
    return NULL;
}


static PyObject *_wrap_trans_affine_parl_to_parl(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    agg::trans_affine *result;
    double temp2[6] ;
    double temp3[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_parl_to_parl",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    {
        int i;
        if (!PySequence_Check(obj2)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj2) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj2,i);
            if (PyFloat_Check(o)) {
                temp3[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp3[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg3 = &temp3[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->parl_to_parl((double const *)arg2,(double const *)arg3);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_rect_to_parl(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double *arg6 = (double *) 0 ;
    agg::trans_affine *result;
    double temp6[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:trans_affine_rect_to_parl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj5)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj5) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj5,i);
            if (PyFloat_Check(o)) {
                temp6[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp6[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg6 = &temp6[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->rect_to_parl(arg2,arg3,arg4,arg5,(double const *)arg6);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_parl_to_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    agg::trans_affine *result;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:trans_affine_parl_to_rect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (double)SWIG_As_double(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->parl_to_rect((double const *)arg2,arg3,arg4,arg5,arg6);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->reset();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_multiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_multiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->multiply((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_premultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_premultiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->premultiply((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_invert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_invert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->invert();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_flip_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_flip_x",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->flip_x();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_flip_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_flip_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->flip_y();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_as_vec6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = temp2;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_as_vec6",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    ((agg::trans_affine const *)arg1)->store_to(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        // Append output value arg2 to resultobj
        PyObject *ret = PyTuple_New(6);
        for (unsigned i=0; i<6; i++)
        PyTuple_SetItem(ret,i,PyFloat_FromDouble(arg2[i]));
        resultobj = ret;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_load_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    agg::trans_affine *result;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_load_from",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->load_from((double const *)arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___imul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->operator *=((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___mul__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___mul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (arg1)->operator *((agg::trans_affine const &)*arg2);
    
    {
        agg::trans_affine * resultptr;
        resultptr = new agg::trans_affine((agg::trans_affine &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__trans_affine, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___invert__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine___invert__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((agg::trans_affine const *)arg1)->operator ~();
    
    {
        agg::trans_affine * resultptr;
        resultptr = new agg::trans_affine((agg::trans_affine &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__trans_affine, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->operator ==((agg::trans_affine const &)*arg2);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->operator !=((agg::trans_affine const &)*arg2);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_transform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_transform",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        if (!(SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,0) != -1)) {
            temp2 = SWIG_As_double(obj1);
            if (PyErr_Occurred()) SWIG_fail;
            arg2 = &temp2;
            res2 = SWIG_NEWOBJ;
        }
    }
    {
        if (!(SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,0) != -1)) {
            temp3 = SWIG_As_double(obj2);
            if (PyErr_Occurred()) SWIG_fail;
            arg3 = &temp3;
            res3 = SWIG_NEWOBJ;
        }
    }
    ((agg::trans_affine const *)arg1)->transform(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_inverse_transform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_inverse_transform",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        if (!(SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,0) != -1)) {
            temp2 = SWIG_As_double(obj1);
            if (PyErr_Occurred()) SWIG_fail;
            arg2 = &temp2;
            res2 = SWIG_NEWOBJ;
        }
    }
    {
        if (!(SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,0) != -1)) {
            temp3 = SWIG_As_double(obj2);
            if (PyErr_Occurred()) SWIG_fail;
            arg3 = &temp3;
            res3 = SWIG_NEWOBJ;
        }
    }
    ((agg::trans_affine const *)arg1)->inverse_transform(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_determinant(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_determinant",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->determinant();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_scale(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_identity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double arg2 = (double) agg::affine_epsilon ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:trans_affine_is_identity",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (double)SWIG_As_double(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->is_identity(arg2);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_equal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    double arg3 = (double) agg::affine_epsilon ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:trans_affine_is_equal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (double)SWIG_As_double(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->is_equal((agg::trans_affine const &)*arg2,arg3);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_get_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_rotation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->rotation();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_get_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_translation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    ((agg::trans_affine const *)arg1)->translation(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_get_scaling(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_scaling",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    ((agg::trans_affine const *)arg1)->scaling(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    agg::trans_affine_rotation *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_trans_affine_rotation",&obj0)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine_rotation *)new agg::trans_affine_rotation(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_rotation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_rotation *arg1 = (agg::trans_affine_rotation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_rotation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine_rotation,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_rotation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_rotation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_scaling__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_scaling *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_scaling",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine_scaling *)new agg::trans_affine_scaling(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_scaling, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine_scaling__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    agg::trans_affine_scaling *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_trans_affine_scaling",&obj0)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine_scaling *)new agg::trans_affine_scaling(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_scaling, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine_scaling(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_trans_affine_scaling__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_trans_affine_scaling__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_trans_affine_scaling'");
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_scaling(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_scaling *arg1 = (agg::trans_affine_scaling *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_scaling",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine_scaling,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_scaling_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_scaling, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_translation *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_translation",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine_translation *)new agg::trans_affine_translation(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_translation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_translation *arg1 = (agg::trans_affine_translation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_translation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine_translation,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_translation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_translation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_skewing(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_skewing *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_skewing",&obj0,&obj1)) goto fail;
    arg1 = (double)SWIG_As_double(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::trans_affine_skewing *)new agg::trans_affine_skewing(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_skewing, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_skewing(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_skewing *arg1 = (agg::trans_affine_skewing *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_skewing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__trans_affine_skewing,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_skewing_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_skewing, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_path_storage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_path_storage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_path_storage")) goto fail;
    result = (agg::path_storage *)new agg::path_storage();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__path_storage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = 0 ;
    agg::path_storage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_path_storage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::path_storage *)new agg::path_storage((agg::path_storage const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__path_storage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_path_storage__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_path_storage__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_path_storage'");
    return NULL;
}


static PyObject *_wrap_path_storage_remove_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_remove_all",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->remove_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_last_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_last_vertex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->last_vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_prev_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_prev_vertex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->prev_vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_rel_to_abs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_rel_to_abs",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    ((agg::path_storage const *)arg1)->rel_to_abs(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_move_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_move_to",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->move_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_move_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_move_rel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->move_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_line_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_line_to",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_line_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_line_rel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arc_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    bool arg6 ;
    double arg7 ;
    double arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:path_storage_arc_to",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (bool)SWIG_As_bool(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (bool)SWIG_As_bool(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (double)SWIG_As_double(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    arg8 = (double)SWIG_As_double(obj7); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->arc_to(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arc_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    bool arg6 ;
    double arg7 ;
    double arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:path_storage_arc_rel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (bool)SWIG_As_bool(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (bool)SWIG_As_bool(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (double)SWIG_As_double(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    arg8 = (double)SWIG_As_double(obj7); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->arc_rel(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve3",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve3(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve3_rel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve3_rel(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_curve3",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve3(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_path_storage_curve3__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve3__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'path_storage_curve3'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_curve3_rel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve3_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_path_storage_curve3_rel__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve3_rel__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'path_storage_curve3_rel'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve4__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:path_storage_curve4",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (double)SWIG_As_double(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (double)SWIG_As_double(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve4(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:path_storage_curve4_rel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (double)SWIG_As_double(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (double)SWIG_As_double(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve4_rel(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve4",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve4(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve4__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    return _wrap_path_storage_curve4__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'path_storage_curve4'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve4_rel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->curve4_rel(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve4_rel__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    return _wrap_path_storage_curve4_rel__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'path_storage_curve4_rel'");
    return NULL;
}


static PyObject *_wrap_path_storage_end_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 = (unsigned int) agg::path_flags_close ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:path_storage_end_poly",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->end_poly(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_close_polygon(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 = (unsigned int) agg::path_flags_none ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:path_storage_close_polygon",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->close_polygon(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    unsigned int arg3 ;
    bool arg4 = (bool) false ;
    unsigned int arg5 = (unsigned int) agg::path_flags_none ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|OO:path_storage_add_poly",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = (bool)SWIG_As_bool(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = (unsigned int)SWIG_As_unsigned_SS_int(obj4); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_poly((double const *)arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_start_new_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_start_new_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->start_new_path();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_copy_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    agg::path_storage *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_copy_from",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_from((agg::path_storage const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_total_vertices(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_total_vertices",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->total_vertices();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    unsigned int result;
    double temp13 ;
    double temp23 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        temp13 = 0; arg3 = &temp13;
        temp23 = 0; arg4 = &temp23;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_vertex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->vertex(arg2,arg3,arg4);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    {
        PyObject *px = PyFloat_FromDouble(*arg3);
        PyObject *py = PyFloat_FromDouble(*arg4);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_command(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_command",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->command(arg2);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_vertex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_path_storage_vertex__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_path_storage_vertex__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'path_storage_vertex'");
    return NULL;
}


static PyObject *_wrap_path_storage_arrange_orientations(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    int arg3 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_arrange_orientations",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->arrange_orientations(arg2,(agg::path_flags_e )arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arrange_orientations_all_paths(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_arrange_orientations_all_paths",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->arrange_orientations_all_paths((agg::path_flags_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_flip_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_flip_x",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->flip_x(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_flip_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_flip_y",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->flip_y(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:path_storage_add_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_modify_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:path_storage_modify_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->modify_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_modify_command(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_modify_command",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__path_storage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->modify_command(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * path_storage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__path_storage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_stroke_theta_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable stroke_theta is read-only.");
    return 1;
}


static PyObject *_wrap_stroke_theta_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_From_double((double)agg::stroke_theta);
    return pyobj;
}


static PyObject *_wrap_delete_rendering_buffer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rendering_buffer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rendering_buffer__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rendering_buffer")) goto fail;
    result = (agg::row_ptr_cache<agg::int8u > *)new agg::row_ptr_cache<agg::int8u >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rendering_buffer__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::int8u *arg1 = (agg::int8u *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    int arg4 ;
    agg::row_ptr_cache<agg::int8u > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_rendering_buffer",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::row_ptr_cache<agg::int8u > *)new agg::row_ptr_cache<agg::int8u >(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rendering_buffer(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rendering_buffer__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__int8u, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_rendering_buffer__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_rendering_buffer'");
    return NULL;
}


static PyObject *_wrap_rendering_buffer_attach(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::int8u *arg2 = (agg::int8u *) 0 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:rendering_buffer_attach",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->attach(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_buf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_buf",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u *)(arg1)->buf();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_buf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_buf",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u *)((agg::row_ptr_cache<agg::int8u > const *)arg1)->buf();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_buf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rendering_buffer_buf__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_rendering_buffer_buf__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rendering_buffer_buf'");
    return NULL;
}


static PyObject *_wrap_rendering_buffer_width(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::row_ptr_cache<agg::int8u > const *)arg1)->width();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_height(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::row_ptr_cache<agg::int8u > const *)arg1)->height();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_stride(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_stride",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::row_ptr_cache<agg::int8u > const *)arg1)->stride();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_stride_abs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_stride_abs",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::row_ptr_cache<agg::int8u > const *)arg1)->stride_abs();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_row__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    unsigned int arg2 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::int8u *)(arg1)->row(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_row__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    unsigned int arg2 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (agg::int8u *)((agg::row_ptr_cache<agg::int8u > const *)arg1)->row(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_row(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rendering_buffer_row__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_rendering_buffer_row__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rendering_buffer_row'");
    return NULL;
}


static PyObject *_wrap_rendering_buffer_next_row__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    void *arg2 = (void *) 0 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_next_row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,&arg2,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u *)(arg1)->next_row(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_next_row__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    void *arg2 = (void *) 0 ;
    agg::int8u *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_next_row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,&arg2,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u *)((agg::row_ptr_cache<agg::int8u > const *)arg1)->next_row((void const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_next_row(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, 0, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_rendering_buffer_next_row__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, 0, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_rendering_buffer_next_row__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rendering_buffer_next_row'");
    return NULL;
}


static PyObject *_wrap_rendering_buffer_rows(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::int8u **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rendering_buffer_rows",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int8u **)((agg::row_ptr_cache<agg::int8u > const *)arg1)->rows();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_agg__int8u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_copy_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::row_ptr_cache<agg::int8u > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_copy_from",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_from((agg::row_ptr_cache<agg::int8u > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::int8u arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_clear",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (agg::int8u)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->clear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rendering_buffer_attachb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::row_ptr_cache<agg::int8u > *arg1 = (agg::row_ptr_cache<agg::int8u > *) 0 ;
    agg::buffer *arg2 = (agg::buffer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rendering_buffer_attachb",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    agg_row_ptr_cache_Sl_agg_int8u_Sg__attachb(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rendering_buffer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__row_ptr_cacheTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_pixel64_type_c_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel64_type *arg1 = (agg::pixel64_type *) 0 ;
    agg::int16u *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pixel64_type_c_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel64_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__int16u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        size_t ii;
        agg::int16u *b = (agg::int16u *) arg1->c;
        for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((agg::int16u *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel64_type_c_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel64_type *arg1 = (agg::pixel64_type *) 0 ;
    agg::int16u *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pixel64_type_c_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel64_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::int16u *)(agg::int16u *) ((arg1)->c);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__int16u, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pixel64_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel64_type *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pixel64_type")) goto fail;
    result = (agg::pixel64_type *)new agg::pixel64_type();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel64_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_pixel64_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel64_type *arg1 = (agg::pixel64_type *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pixel64_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel64_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pixel64_type_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__pixel64_type, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pixel_format_rgba__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pixel_format_rgba")) goto fail;
    result = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *)new agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pixel_format_rgba__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rendering_buffer *arg1 = 0 ;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pixel_format_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__rendering_buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *)new agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pixel_format_rgba(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pixel_format_rgba__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__rendering_buffer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_pixel_format_rgba__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_pixel_format_rgba'");
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_attach(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    agg::rendering_buffer *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pixel_format_rgba_attach",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rendering_buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->attach(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_width(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pixel_format_rgba_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > const *)arg1)->width();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_height(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pixel_format_rgba_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > const *)arg1)->height();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pixel_format_rgba_pixel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > const *)arg1)->pixel(arg2,arg3);
    
    {
        agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type * resultptr;
        resultptr = new agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type((agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_row(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::row_data result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pixel_format_rgba_row",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > const *)arg1)->row(arg2,arg3);
    
    {
        agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::row_data * resultptr;
        resultptr = new agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::row_data((agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::row_data &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rendering_buffer__row_data, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_span(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::span_data result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:pixel_format_rgba_span",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->span(arg2,arg3,arg4);
    
    {
        agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::span_data * resultptr;
        resultptr = new agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::span_data((agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::span_data &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rendering_buffer__span_data, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_copy_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:pixel_format_rgba_copy_pixel",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_pixel(arg2,arg3,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg4 = 0 ;
    agg::int8u arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:pixel_format_rgba_blend_pixel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg5 = (agg::int8u)SWIG_As_unsigned_SS_char(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_pixel(arg2,arg3,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_copy_hline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:pixel_format_rgba_copy_hline",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_hline(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_copy_vline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:pixel_format_rgba_copy_vline",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_vline(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_hline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    agg::int8u arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:pixel_format_rgba_blend_hline",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg6 = (agg::int8u)SWIG_As_unsigned_SS_char(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_hline(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_vline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    agg::int8u arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:pixel_format_rgba_blend_vline",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg6 = (agg::int8u)SWIG_As_unsigned_SS_char(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_vline(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_solid_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    agg::int8u *arg6 = (agg::int8u *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:pixel_format_rgba_blend_solid_hspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->blend_solid_hspan(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5,(agg::int8u const *)arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_solid_vspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = 0 ;
    agg::int8u *arg6 = (agg::int8u *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:pixel_format_rgba_blend_solid_vspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->blend_solid_vspan(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const &)*arg5,(agg::int8u const *)arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_copy_color_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = (agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:pixel_format_rgba_copy_color_hspan",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->copy_color_hspan(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const *)arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_color_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = (agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *) 0 ;
    agg::int8u *arg6 = (agg::int8u *) 0 ;
    agg::int8u arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:pixel_format_rgba_blend_color_hspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg7 = (agg::int8u)SWIG_As_unsigned_SS_char(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_color_hspan(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const *)arg5,(agg::int8u const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_blend_color_vspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *arg5 = (agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type *) 0 ;
    agg::int8u *arg6 = (agg::int8u *) 0 ;
    agg::int8u arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:pixel_format_rgba_blend_color_vspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg7 = (agg::int8u)SWIG_As_unsigned_SS_char(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_color_vspan(arg2,arg3,arg4,(agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::color_type const *)arg5,(agg::int8u const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_premultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pixel_format_rgba_premultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->premultiply();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_demultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pixel_format_rgba_demultiply",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->demultiply();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pixel_format_rgba_copy_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    agg::rendering_buffer *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    unsigned int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:pixel_format_rgba_copy_from",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rendering_buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (int)SWIG_As_int(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (unsigned int)SWIG_As_unsigned_SS_int(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->copy_from((agg::rendering_buffer const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_pixel_format_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *arg1 = (agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pixel_format_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pixel_format_rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_renderer_base_rgba__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_renderer_base_rgba")) goto fail;
    result = (agg::renderer_base<pixfmt_rgba_t > *)new agg::renderer_base<pixfmt_rgba_t >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_base_rgba__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *arg1 = 0 ;
    agg::renderer_base<pixfmt_rgba_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_renderer_base_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::renderer_base<pixfmt_rgba_t > *)new agg::renderer_base<pixfmt_rgba_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_base_rgba(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_renderer_base_rgba__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_renderer_base_rgba__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_renderer_base_rgba'");
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_attach(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_base_rgba_attach",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->attach(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_ren__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_ren",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type const &_result_ref = ((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->ren();
        result = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_ren__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_ren",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type &_result_ref = (arg1)->ren();
        result = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_ren(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_renderer_base_rgba_ren__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_renderer_base_rgba_ren__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'renderer_base_rgba_ren'");
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_width(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->width();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_height(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->height();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clip_box__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_clip_box",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->clip_box(arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_reset_clipping(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_base_rgba_reset_clipping",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (bool)SWIG_As_bool(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reset_clipping(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clip_box_naked(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_clip_box_naked",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->clip_box_naked(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_inbox(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:renderer_base_rgba_inbox",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->inbox(arg2,arg3);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_first_clip_box(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_first_clip_box",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->first_clip_box();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_next_clip_box(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_next_clip_box",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)(arg1)->next_clip_box();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clip_box__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_clip_box",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rect const &_result_ref = ((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->clip_box();
        result = (agg::rect *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clip_box(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_renderer_base_rgba_clip_box__SWIG_1(self,args);
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_renderer_base_rgba_clip_box__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'renderer_base_rgba_clip_box'");
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_xmin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_xmin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->xmin();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_ymin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_ymin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->ymin();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_xmax(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_xmax",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->xmax();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_ymax(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_ymax",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->ymax();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_bounding_clip_box(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_bounding_clip_box",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::rect const &_result_ref = ((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->bounding_clip_box();
        result = (agg::rect *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_bounding_xmin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_bounding_xmin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->bounding_xmin();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_bounding_ymin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_bounding_ymin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->bounding_ymin();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_bounding_xmax(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_bounding_xmax",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->bounding_xmax();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_bounding_ymax(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_base_rgba_bounding_ymax",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->bounding_ymax();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_base_rgba_clear",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->clear((agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:renderer_base_rgba_copy_pixel",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_pixel(arg2,arg3,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg4 = 0 ;
    agg::cover_type arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_blend_pixel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg5 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_pixel(arg2,arg3,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_pixel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:renderer_base_rgba_pixel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->pixel(arg2,arg3);
    
    {
        agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type * resultptr;
        resultptr = new agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type((agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_hline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_copy_hline",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_hline(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_vline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_copy_vline",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_vline(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_hline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    agg::cover_type arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:renderer_base_rgba_blend_hline",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg6 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_hline(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_vline(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    agg::cover_type arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:renderer_base_rgba_blend_vline",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg6 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj5); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_vline(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_bar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg6 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:renderer_base_rgba_copy_bar",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg6 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->copy_bar(arg2,arg3,arg4,arg5,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_bar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg6 = 0 ;
    agg::cover_type arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:renderer_base_rgba_blend_bar",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg6 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg7 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj6); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->blend_bar(arg2,arg3,arg4,arg5,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_span(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::span_data result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:renderer_base_rgba_span",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->span(arg2,arg3,arg4);
    
    {
        agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::span_data * resultptr;
        resultptr = new agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::span_data((agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::span_data &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rendering_buffer__span_data, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_solid_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:renderer_base_rgba_blend_solid_hspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->blend_solid_hspan(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5,(agg::cover_type const *)arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_solid_vspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:renderer_base_rgba_blend_solid_vspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->blend_solid_vspan(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const &)*arg5,(agg::cover_type const *)arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_color_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_copy_color_hspan",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->copy_color_hspan(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_color_hspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    agg::cover_type arg7 = (agg::cover_type) agg::cover_full ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO|O:renderer_base_rgba_blend_color_hspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj6) {
        arg7 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj6); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->blend_color_hspan(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5,(agg::cover_type const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_color_vspan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    agg::cover_type arg7 = (agg::cover_type) agg::cover_full ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO|O:renderer_base_rgba_blend_color_vspan",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj6) {
        arg7 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj6); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->blend_color_vspan(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5,(agg::cover_type const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_color_hspan_no_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_copy_color_hspan_no_clip",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->copy_color_hspan_no_clip(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_color_hspan_no_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    agg::cover_type arg7 = (agg::cover_type) agg::cover_full ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO|O:renderer_base_rgba_blend_color_hspan_no_clip",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj6) {
        arg7 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj6); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->blend_color_hspan_no_clip(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5,(agg::cover_type const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_blend_color_vspan_no_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *arg5 = (agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type *) 0 ;
    agg::cover_type *arg6 = (agg::cover_type *) 0 ;
    agg::cover_type arg7 = (agg::cover_type) agg::cover_full ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO|O:renderer_base_rgba_blend_color_vspan_no_clip",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_agg__cover_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj6) {
        arg7 = (agg::cover_type)SWIG_As_unsigned_SS_char(obj6); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->blend_color_vspan_no_clip(arg2,arg3,arg4,(agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::color_type const *)arg5,(agg::cover_type const *)arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clip_rect_area(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rect *arg2 = 0 ;
    agg::rect *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    agg::rect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:renderer_base_rgba_clip_rect_area",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_agg__rect,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (int)SWIG_As_int(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    result = ((agg::renderer_base<pixfmt_rgba_t > const *)arg1)->clip_rect_area(*arg2,*arg3,arg4,arg5);
    
    {
        agg::rect * resultptr;
        resultptr = new agg::rect((agg::rect &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_copy_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rendering_buffer *arg2 = 0 ;
    agg::rect *arg3 = (agg::rect *) 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OOO:renderer_base_rgba_copy_from",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rendering_buffer,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_agg__rect,
        SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    }
    if (obj3) {
        arg4 = (int)SWIG_As_int(obj3); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = (int)SWIG_As_int(obj4); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->copy_from((agg::rendering_buffer const &)*arg2,(agg::rect const *)arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clear_rgba8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rgba8 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_base_rgba_clear_rgba8",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_base_Sl_pixfmt_rgba_t_Sg__clear_rgba8(arg1,(agg::rgba8 const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_base_rgba_clear_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    agg::rgba *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_base_rgba_clear_rgba",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_base_Sl_pixfmt_rgba_t_Sg__clear_rgba(arg1,(agg::rgba const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_renderer_base_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_base<pixfmt_rgba_t > *arg1 = (agg::renderer_base<pixfmt_rgba_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_renderer_base_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * renderer_base_rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_curve_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    path_t *arg1 = 0 ;
    agg::conv_curve<path_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_curve_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_curve<path_t > *)new agg::conv_curve<path_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_curveTagg__path_storage_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_path_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    path_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_path_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_path_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_path_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_path_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_curve_path_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_curve<path_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_path_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_curveTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_curve_path_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_curveTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_curve_path_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_curve_path_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_curve_path_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_path_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_path_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_curve_path_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_curve_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<path_t > *arg1 = (agg::conv_curve<path_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_curve_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_curve_path_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_curveTagg__path_storage_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_curve_trans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    transpath_t *arg1 = 0 ;
    agg::conv_curve<transpath_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_curve_trans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_curve<transpath_t > *)new agg::conv_curve<transpath_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    transpath_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_trans_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_trans_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_curve_trans_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_curve<transpath_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_curve_trans_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_curve_trans_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_curve_trans_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_curve_trans_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_curve_trans_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_curve_trans_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_curve_trans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_curve<transpath_t > *arg1 = (agg::conv_curve<transpath_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_curve_trans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_curve_trans_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_transform_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    path_t *arg1 = 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::conv_transform<path_t,agg::trans_affine > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_conv_transform_path",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_transform<path_t,agg::trans_affine > *)new agg::conv_transform<path_t,agg::trans_affine >(*arg1,(agg::trans_affine const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_path_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<path_t,agg::trans_affine > *arg1 = (agg::conv_transform<path_t,agg::trans_affine > *) 0 ;
    path_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_path_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_path_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<path_t,agg::trans_affine > *arg1 = (agg::conv_transform<path_t,agg::trans_affine > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_path_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_path_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<path_t,agg::trans_affine > *arg1 = (agg::conv_transform<path_t,agg::trans_affine > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_transform_path_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_path_transformer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<path_t,agg::trans_affine > *arg1 = (agg::conv_transform<path_t,agg::trans_affine > *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_path_transformer",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->transformer((agg::trans_affine const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_transform_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<path_t,agg::trans_affine > *arg1 = (agg::conv_transform<path_t,agg::trans_affine > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_transform_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_transform_path_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_transform_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    curve_t *arg1 = 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::conv_transform<curve_t,agg::trans_affine > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_conv_transform_curve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_transform<curve_t,agg::trans_affine > *)new agg::conv_transform<curve_t,agg::trans_affine >(*arg1,(agg::trans_affine const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_curve_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<curve_t,agg::trans_affine > *arg1 = (agg::conv_transform<curve_t,agg::trans_affine > *) 0 ;
    curve_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_curve_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_curve_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<curve_t,agg::trans_affine > *arg1 = (agg::conv_transform<curve_t,agg::trans_affine > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_curve_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_curve_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<curve_t,agg::trans_affine > *arg1 = (agg::conv_transform<curve_t,agg::trans_affine > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_transform_curve_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_transform_curve_transformer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<curve_t,agg::trans_affine > *arg1 = (agg::conv_transform<curve_t,agg::trans_affine > *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_transform_curve_transformer",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__trans_affine,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->transformer((agg::trans_affine const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_transform_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_transform<curve_t,agg::trans_affine > *arg1 = (agg::conv_transform<curve_t,agg::trans_affine > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_transform_curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_transform_curve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vcgen_stroke(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vcgen_stroke")) goto fail;
    result = (agg::vcgen_stroke *)new agg::vcgen_stroke();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::vcgen_stroke const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_line_cap'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::vcgen_stroke const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_line_join'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::vcgen_stroke const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::vcgen_stroke const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_width'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::vcgen_stroke const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_miter_limit'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::vcgen_stroke const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::vcgen_stroke const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::vcgen_stroke const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_vcgen_stroke_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__vcgen_stroke, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_vcgen_stroke_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'vcgen_stroke_shorten'");
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_remove_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vcgen_stroke_remove_all",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->remove_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_add_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vcgen_stroke_add_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vcgen_stroke_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vcgen_stroke_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vcgen_stroke_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vcgen_stroke(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vcgen_stroke *arg1 = (agg::vcgen_stroke *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vcgen_stroke",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__vcgen_stroke,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vcgen_stroke_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__vcgen_stroke, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_null_markers_remove_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:null_markers_remove_all",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->remove_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_null_markers_add_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    double arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:null_markers_add_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_null_markers_prepare_src(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:null_markers_prepare_src",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->prepare_src();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_null_markers_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:null_markers_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_null_markers_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:null_markers_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_null_markers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_null_markers")) goto fail;
    result = (agg::null_markers *)new agg::null_markers();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_null_markers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::null_markers *arg1 = (agg::null_markers *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_null_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__null_markers,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * null_markers_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__null_markers, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_adaptor_vcgen_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    path_t *arg1 = 0 ;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_adaptor_vcgen_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *)new agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    path_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_path_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_generator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_path_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke &_result_ref = (arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_generator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_path_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke const &_result_ref = ((agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_generator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_path_generator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_path_generator__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_path_generator'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_markers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_path_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers &_result_ref = (arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_markers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_path_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers const &_result_ref = ((agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_markers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_path_markers__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_path_markers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_path_markers'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_path_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_path_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_adaptor_vcgen_path_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_adaptor_vcgen_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_adaptor_vcgen_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_adaptor_vcgen_path_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_adaptor_vcgen_transpath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    transpath_t *arg1 = 0 ;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_adaptor_vcgen_transpath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *)new agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    transpath_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_transpath_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_generator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transpath_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke &_result_ref = (arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_generator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transpath_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke const &_result_ref = ((agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_generator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transpath_generator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transpath_generator__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_transpath_generator'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_markers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transpath_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers &_result_ref = (arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_markers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transpath_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers const &_result_ref = ((agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_markers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transpath_markers__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transpath_markers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_transpath_markers'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_transpath_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transpath_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_adaptor_vcgen_transpath_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_adaptor_vcgen_transpath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_adaptor_vcgen_transpath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_adaptor_vcgen_transpath_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_adaptor_vcgen_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    curve_t *arg1 = 0 ;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_adaptor_vcgen_curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *)new agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    curve_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_curve_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_generator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curve_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke &_result_ref = (arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_generator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curve_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke const &_result_ref = ((agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_generator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curve_generator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curve_generator__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_curve_generator'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_markers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curve_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers &_result_ref = (arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_markers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curve_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers const &_result_ref = ((agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_markers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curve_markers__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curve_markers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_curve_markers'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_curve_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curve_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_adaptor_vcgen_curve_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_adaptor_vcgen_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_adaptor_vcgen_curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_adaptor_vcgen_curve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_adaptor_vcgen_transcurve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    transcurve_t *arg1 = 0 ;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_adaptor_vcgen_transcurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_transcurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *)new agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    transcurve_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_transcurve_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_transcurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_generator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transcurve_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke &_result_ref = (arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_generator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transcurve_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke const &_result_ref = ((agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_generator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transcurve_generator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transcurve_generator__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_transcurve_generator'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_markers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transcurve_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers &_result_ref = (arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_markers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_transcurve_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers const &_result_ref = ((agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_markers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transcurve_markers__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_transcurve_markers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_transcurve_markers'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_transcurve_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_transcurve_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_adaptor_vcgen_transcurve_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_adaptor_vcgen_transcurve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_adaptor_vcgen_transcurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_adaptor_vcgen_transcurve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_adaptor_vcgen_curvetrans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    curvetrans_t *arg1 = 0 ;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_adaptor_vcgen_curvetrans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_curvetrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *)new agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_set_source(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    curvetrans_t *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_curvetrans_set_source",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_curvetrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->set_source(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_generator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curvetrans_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke &_result_ref = (arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_generator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::vcgen_stroke *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curvetrans_generator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::vcgen_stroke const &_result_ref = ((agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->generator();
        result = (agg::vcgen_stroke *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vcgen_stroke, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_generator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curvetrans_generator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curvetrans_generator__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_curvetrans_generator'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_markers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curvetrans_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers &_result_ref = (arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_markers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    agg::null_markers *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_adaptor_vcgen_curvetrans_markers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::null_markers const &_result_ref = ((agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > const *)arg1)->markers();
        result = (agg::null_markers *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__null_markers, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_markers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curvetrans_markers__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_adaptor_vcgen_curvetrans_markers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_adaptor_vcgen_curvetrans_markers'");
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_adaptor_vcgen_curvetrans_rewind",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_adaptor_vcgen_curvetrans_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:conv_adaptor_vcgen_curvetrans_vertex",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conv_adaptor_vcgen_curvetrans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *arg1 = (agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_adaptor_vcgen_curvetrans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_adaptor_vcgen_curvetrans_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_stroke_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    path_t *arg1 = 0 ;
    agg::conv_stroke<path_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_stroke_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_stroke<path_t > *)new agg::conv_stroke<path_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<path_t > const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_line_cap'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<path_t > const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<path_t > const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<path_t > const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_width'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<path_t > const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<path_t > const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<path_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_path_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_path_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<path_t > const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_path_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_path_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_path_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_path_shorten'");
    return NULL;
}


static PyObject *_wrap_delete_conv_stroke_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<path_t > *arg1 = (agg::conv_stroke<path_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_stroke_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_stroke_path_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_strokeTagg__path_storage_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_stroke_transpath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    transpath_t *arg1 = 0 ;
    agg::conv_stroke<transpath_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_stroke_transpath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_stroke<transpath_t > *)new agg::conv_stroke<transpath_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transpath_t > const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_line_cap'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transpath_t > const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transpath_t > const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transpath_t > const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_width'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transpath_t > const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transpath_t > const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transpath_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transpath_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transpath_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transpath_t > const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transpath_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transpath_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transpath_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transpath_shorten'");
    return NULL;
}


static PyObject *_wrap_delete_conv_stroke_transpath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transpath_t > *arg1 = (agg::conv_stroke<transpath_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_stroke_transpath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_stroke_transpath_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_stroke_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    curve_t *arg1 = 0 ;
    agg::conv_stroke<curve_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_stroke_curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_stroke<curve_t > *)new agg::conv_stroke<curve_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curve_t > const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_line_cap'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curve_t > const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curve_t > const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curve_t > const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_width'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curve_t > const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curve_t > const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curve_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curve_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curve_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curve_t > const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curve_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curve_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curve_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curve_shorten'");
    return NULL;
}


static PyObject *_wrap_delete_conv_stroke_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curve_t > *arg1 = (agg::conv_stroke<curve_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_stroke_curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_stroke_curve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_stroke_transcurve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    transcurve_t *arg1 = 0 ;
    agg::conv_stroke<transcurve_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_stroke_transcurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_transcurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_stroke<transcurve_t > *)new agg::conv_stroke<transcurve_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transcurve_t > const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_line_cap'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transcurve_t > const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<transcurve_t > const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transcurve_t > const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_width'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transcurve_t > const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transcurve_t > const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transcurve_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_transcurve_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_transcurve_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<transcurve_t > const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_transcurve_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_transcurve_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_transcurve_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_transcurve_shorten'");
    return NULL;
}


static PyObject *_wrap_delete_conv_stroke_transcurve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<transcurve_t > *arg1 = (agg::conv_stroke<transcurve_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_stroke_transcurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_stroke_transcurve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_conv_stroke_curvetrans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    curvetrans_t *arg1 = 0 ;
    agg::conv_stroke<curvetrans_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_conv_stroke_curvetrans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_curvetrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::conv_stroke<curvetrans_t > *)new agg::conv_stroke<curvetrans_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_cap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_line_cap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_cap((agg::line_cap_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_line_join__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_inner_line_join",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_line_join((agg::line_join_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_cap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_line_cap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curvetrans_t > const *)arg1)->line_cap();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_cap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_line_cap__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_line_cap__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_line_cap'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curvetrans_t > const *)arg1)->line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_line_join__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_inner_line_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::conv_stroke<curvetrans_t > const *)arg1)->inner_line_join();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_line_join(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_inner_line_join__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_inner_line_join__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_inner_line_join'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_width",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->width(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_miter_limit_theta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_miter_limit_theta",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->miter_limit_theta(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_miter_limit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_inner_miter_limit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->inner_miter_limit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_approximation_scale__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_approximation_scale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->approximation_scale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curvetrans_t > const *)arg1)->width();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_width__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_width__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_width'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curvetrans_t > const *)arg1)->miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_miter_limit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_inner_miter_limit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curvetrans_t > const *)arg1)->inner_miter_limit();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_inner_miter_limit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_inner_miter_limit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_inner_miter_limit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_inner_miter_limit'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_approximation_scale__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_approximation_scale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curvetrans_t > const *)arg1)->approximation_scale();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_approximation_scale(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_approximation_scale__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_approximation_scale__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_approximation_scale'");
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_shorten__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:conv_stroke_curvetrans_shorten",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->shorten(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_shorten__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conv_stroke_curvetrans_shorten",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (double)((agg::conv_stroke<curvetrans_t > const *)arg1)->shorten();
    
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conv_stroke_curvetrans_shorten(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_conv_stroke_curvetrans_shorten__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_conv_stroke_curvetrans_shorten__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'conv_stroke_curvetrans_shorten'");
    return NULL;
}


static PyObject *_wrap_delete_conv_stroke_curvetrans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::conv_stroke<curvetrans_t > *arg1 = (agg::conv_stroke<curvetrans_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conv_stroke_curvetrans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conv_stroke_curvetrans_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_rasterizer_scanline_aa(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rasterizer_scanline_aa")) goto fail;
    result = (rasterizer_scanline_aa< > *)new rasterizer_scanline_aa< >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_rasterizer_scanline_aaT_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_filling_rule(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    agg::filling_rule_e arg2 ;
    agg::filling_rule_e *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rasterizer_scanline_aa_filling_rule",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_agg__filling_rule_e,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    (arg1)->filling_rule(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_clip_box(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:rasterizer_scanline_aa_clip_box",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (double)SWIG_As_double(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (double)SWIG_As_double(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->clip_box(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_reset_clipping(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_reset_clipping",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->reset_clipping();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_apply_gamma(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rasterizer_scanline_aa_apply_gamma",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)((rasterizer_scanline_aa< > const *)arg1)->apply_gamma(arg2);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    double arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:rasterizer_scanline_aa_add_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_move_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rasterizer_scanline_aa_move_to",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->move_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_line_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rasterizer_scanline_aa_line_to",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_close_polygon(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_close_polygon",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->close_polygon();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_move_to_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rasterizer_scanline_aa_move_to_d",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->move_to_d(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_line_to_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rasterizer_scanline_aa_line_to_d",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (double)SWIG_As_double(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->line_to_d(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_min_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_min_x",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((rasterizer_scanline_aa< > const *)arg1)->min_x();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_min_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_min_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((rasterizer_scanline_aa< > const *)arg1)->min_y();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_max_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_max_x",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((rasterizer_scanline_aa< > const *)arg1)->max_x();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_max_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_max_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((rasterizer_scanline_aa< > const *)arg1)->max_y();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_calculate_alpha(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rasterizer_scanline_aa_calculate_alpha",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->calculate_alpha(arg2);
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_sort(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_sort",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->sort();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_rewind_scanlines(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rasterizer_scanline_aa_rewind_scanlines",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)(arg1)->rewind_scanlines();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_hit_test(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rasterizer_scanline_aa_hit_test",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->hit_test(arg2,arg3);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    path_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_path_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    stroke_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_stroke_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    transpath_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_transpath_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    stroketrans_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_stroketrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    curve_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_curve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    strokecurve_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_strokecurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    transcurve_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_transcurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    stroketranscurve_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_stroketranscurve_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    curvetrans_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_curvetrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    strokecurvetrans_t *arg2 = 0 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:rasterizer_scanline_aa_add_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_strokecurvetrans_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_path(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rasterizer_scanline_aa_add_path(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_path_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_0(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_stroke_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_1(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_1(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_transpath_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_2(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_2(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_stroketrans_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_3(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_3(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_curve_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_4(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_4(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_strokecurve_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_5(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_5(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_transcurve_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_6(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_6(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_stroketranscurve_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_7(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_7(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_curvetrans_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_8(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_8(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_rasterizer_scanline_aaT_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_strokecurvetrans_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_9(self,args);
                }
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_rasterizer_scanline_aa_add_path__SWIG_9(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'rasterizer_scanline_aa_add_path'");
    return NULL;
}


static PyObject *_wrap_delete_rasterizer_scanline_aa(PyObject *, PyObject *args) {
    PyObject *resultobj;
    rasterizer_scanline_aa< > *arg1 = (rasterizer_scanline_aa< > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rasterizer_scanline_aa",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rasterizer_scanline_aa_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_rasterizer_scanline_aaT_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_renderer_scanline_aa_solid_rgba__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_renderer_scanline_aa_solid_rgba")) goto fail;
    result = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *)new agg::renderer_scanline_aa_solid<renderer_base_rgba_t >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_scanline_aa_solid_rgba__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::base_ren_type *arg1 = 0 ;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_renderer_scanline_aa_solid_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *)new agg::renderer_scanline_aa_solid<renderer_base_rgba_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_scanline_aa_solid_rgba(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_renderer_scanline_aa_solid_rgba__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_renderer_scanline_aa_solid_rgba__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_renderer_scanline_aa_solid_rgba'");
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_attach(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::base_ren_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_aa_solid_rgba_attach",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->attach(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_color__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_aa_solid_rgba_color",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->color((agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_color__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_scanline_aa_solid_rgba_color",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type const &_result_ref = ((agg::renderer_scanline_aa_solid<renderer_base_rgba_t > const *)arg1)->color();
        result = (agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_color(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_renderer_scanline_aa_solid_rgba_color__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_renderer_scanline_aa_solid_rgba_color__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'renderer_scanline_aa_solid_rgba_color'");
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_prepare(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_aa_solid_rgba_prepare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->prepare(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_color_rgba8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    agg::rgba8 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_aa_solid_rgba_color_rgba8",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_scanline_aa_solid_Sl_renderer_base_rgba_t_Sg__color_rgba8(arg1,(agg::rgba8 const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_aa_solid_rgba_color_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    agg::rgba *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_aa_solid_rgba_color_rgba",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_scanline_aa_solid_Sl_renderer_base_rgba_t_Sg__color_rgba(arg1,(agg::rgba const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_renderer_scanline_aa_solid_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_renderer_scanline_aa_solid_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * renderer_scanline_aa_solid_rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_renderer_scanline_bin_solid_rgba__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_renderer_scanline_bin_solid_rgba")) goto fail;
    result = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *)new agg::renderer_scanline_bin_solid<renderer_base_rgba_t >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_scanline_bin_solid_rgba__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::base_ren_type *arg1 = 0 ;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_renderer_scanline_bin_solid_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *)new agg::renderer_scanline_bin_solid<renderer_base_rgba_t >(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_renderer_scanline_bin_solid_rgba(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_renderer_scanline_bin_solid_rgba__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_renderer_scanline_bin_solid_rgba__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_renderer_scanline_bin_solid_rgba'");
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_attach(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::base_ren_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_bin_solid_rgba_attach",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->attach(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_color__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_bin_solid_rgba_color",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->color((agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_color__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:renderer_scanline_bin_solid_rgba_color",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type const &_result_ref = ((agg::renderer_scanline_bin_solid<renderer_base_rgba_t > const *)arg1)->color();
        result = (agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_color(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_renderer_scanline_bin_solid_rgba_color__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_renderer_scanline_bin_solid_rgba_color__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'renderer_scanline_bin_solid_rgba_color'");
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_prepare(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_bin_solid_rgba_prepare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned int)SWIG_As_unsigned_SS_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->prepare(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_color_rgba8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    agg::rgba8 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_bin_solid_rgba_color_rgba8",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba8,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_scanline_bin_solid_Sl_renderer_base_rgba_t_Sg__color_rgba8(arg1,(agg::rgba8 const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_renderer_scanline_bin_solid_rgba_color_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    agg::rgba *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:renderer_scanline_bin_solid_rgba_color_rgba",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__rgba,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg_renderer_scanline_bin_solid_Sl_renderer_base_rgba_t_Sg__color_rgba(arg1,(agg::rgba const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_renderer_scanline_bin_solid_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *arg1 = (agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_renderer_scanline_bin_solid_rgba",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * renderer_scanline_bin_solid_rgba_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_scanline_p8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_scanline_p8",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_scanline_p8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_scanline_p8")) goto fail;
    result = (agg::scanline_p<agg::int8u > *)new agg::scanline_p<agg::int8u >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__scanline_pTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline_p8_reset",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reset(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_add_cell(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline_p8_add_cell",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_cell(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_add_cells(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    agg::int8u *arg4 = (agg::int8u *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline_p8_add_cells",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_agg__int8u,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->add_cells(arg2,arg3,(agg::int8u const *)arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_add_span(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline_p8_add_span",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_span(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_finalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:scanline_p8_finalize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->finalize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_reset_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_p8_reset_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->reset_spans();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_p8_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((agg::scanline_p<agg::int8u > const *)arg1)->y();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_num_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_p8_num_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::scanline_p<agg::int8u > const *)arg1)->num_spans();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_p8_begin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_p<agg::int8u > *arg1 = (agg::scanline_p<agg::int8u > *) 0 ;
    agg::scanline_p<unsigned char >::const_iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_p8_begin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (agg::scanline_p<unsigned char >::const_iterator)((agg::scanline_p<agg::int8u > const *)arg1)->begin();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_span, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * scanline_p8_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__scanline_pTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_scanline_bin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_scanline_bin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_scanline_bin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_scanline_bin")) goto fail;
    result = (agg::scanline_bin *)new agg::scanline_bin();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__scanline_bin, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline_bin_reset",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reset(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_add_cell(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline_bin_add_cell",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_cell(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_add_span(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline_bin_add_span",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_span(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_add_cells(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    void *arg4 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline_bin_add_cells",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,&arg4,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->add_cells(arg2,arg3,(void const *)arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_finalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:scanline_bin_finalize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->finalize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_reset_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_bin_reset_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->reset_spans();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_bin_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)(arg1)->y();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline_bin_num_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline_bin *arg1 = (agg::scanline_bin *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline_bin_num_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::scanline_bin const *)arg1)->num_spans();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * scanline_bin_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__scanline_bin, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_scanline32_bin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_scanline32_bin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_scanline32_bin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_scanline32_bin")) goto fail;
    result = (agg::scanline32_bin *)new agg::scanline32_bin();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__scanline32_bin, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline32_bin_reset",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reset(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_add_cell(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scanline32_bin_add_cell",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_cell(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_add_span(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline32_bin_add_span",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int)SWIG_As_unsigned_SS_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_span(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_add_cells(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    void *arg4 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scanline32_bin_add_cells",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int)SWIG_As_unsigned_SS_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,&arg4,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->add_cells(arg2,arg3,(void const *)arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_finalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:scanline32_bin_finalize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->finalize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_reset_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline32_bin_reset_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->reset_spans();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline32_bin_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)(arg1)->y();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scanline32_bin_num_spans(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::scanline32_bin *arg1 = (agg::scanline32_bin *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scanline32_bin_num_spans",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_agg__scanline32_bin,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned int)((agg::scanline32_bin const *)arg1)->num_spans();
    
    resultobj = SWIG_From_unsigned_SS_int((unsigned int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * scanline32_bin_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__scanline32_bin, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_render_scanlines_rgba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rasterizer_scanline_aa< > *arg1 = 0 ;
    agg::scanline_p<agg::int8u > *arg2 = 0 ;
    agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:render_scanlines_rgba",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_rasterizer_scanline_aaT_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_agg__scanline_pTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    agg::render_scanlines<agg::rasterizer_scanline_aa< >,agg::scanline_p<agg::int8u >,agg::renderer_scanline_aa_solid<renderer_base_rgba_t > >(*arg1,*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"deg2rad", _wrap_deg2rad, METH_VARARGS, NULL },
	 { (char *)"rad2deg", _wrap_rad2deg, METH_VARARGS, NULL },
	 { (char *)"is_vertex", _wrap_is_vertex, METH_VARARGS, NULL },
	 { (char *)"is_stop", _wrap_is_stop, METH_VARARGS, NULL },
	 { (char *)"is_move_to", _wrap_is_move_to, METH_VARARGS, NULL },
	 { (char *)"is_line_to", _wrap_is_line_to, METH_VARARGS, NULL },
	 { (char *)"is_curve", _wrap_is_curve, METH_VARARGS, NULL },
	 { (char *)"is_curve3", _wrap_is_curve3, METH_VARARGS, NULL },
	 { (char *)"is_curve4", _wrap_is_curve4, METH_VARARGS, NULL },
	 { (char *)"is_end_poly", _wrap_is_end_poly, METH_VARARGS, NULL },
	 { (char *)"is_close", _wrap_is_close, METH_VARARGS, NULL },
	 { (char *)"is_next_poly", _wrap_is_next_poly, METH_VARARGS, NULL },
	 { (char *)"is_cw", _wrap_is_cw, METH_VARARGS, NULL },
	 { (char *)"is_ccw", _wrap_is_ccw, METH_VARARGS, NULL },
	 { (char *)"is_oriented", _wrap_is_oriented, METH_VARARGS, NULL },
	 { (char *)"is_closed", _wrap_is_closed, METH_VARARGS, NULL },
	 { (char *)"get_close_flag", _wrap_get_close_flag, METH_VARARGS, NULL },
	 { (char *)"clear_orientation", _wrap_clear_orientation, METH_VARARGS, NULL },
	 { (char *)"get_orientation", _wrap_get_orientation, METH_VARARGS, NULL },
	 { (char *)"set_orientation", _wrap_set_orientation, METH_VARARGS, NULL },
	 { (char *)"point_type_x_set", _wrap_point_type_x_set, METH_VARARGS, NULL },
	 { (char *)"point_type_x_get", _wrap_point_type_x_get, METH_VARARGS, NULL },
	 { (char *)"point_type_y_set", _wrap_point_type_y_set, METH_VARARGS, NULL },
	 { (char *)"point_type_y_get", _wrap_point_type_y_get, METH_VARARGS, NULL },
	 { (char *)"new_point_type", _wrap_new_point_type, METH_VARARGS, NULL },
	 { (char *)"delete_point_type", _wrap_delete_point_type, METH_VARARGS, NULL },
	 { (char *)"point_type_swigregister", point_type_swigregister, METH_VARARGS, NULL },
	 { (char *)"vertex_type_x_set", _wrap_vertex_type_x_set, METH_VARARGS, NULL },
	 { (char *)"vertex_type_x_get", _wrap_vertex_type_x_get, METH_VARARGS, NULL },
	 { (char *)"vertex_type_y_set", _wrap_vertex_type_y_set, METH_VARARGS, NULL },
	 { (char *)"vertex_type_y_get", _wrap_vertex_type_y_get, METH_VARARGS, NULL },
	 { (char *)"vertex_type_cmd_set", _wrap_vertex_type_cmd_set, METH_VARARGS, NULL },
	 { (char *)"vertex_type_cmd_get", _wrap_vertex_type_cmd_get, METH_VARARGS, NULL },
	 { (char *)"new_vertex_type", _wrap_new_vertex_type, METH_VARARGS, NULL },
	 { (char *)"delete_vertex_type", _wrap_delete_vertex_type, METH_VARARGS, NULL },
	 { (char *)"vertex_type_swigregister", vertex_type_swigregister, METH_VARARGS, NULL },
	 { (char *)"rect_x1_set", _wrap_rect_x1_set, METH_VARARGS, NULL },
	 { (char *)"rect_x1_get", _wrap_rect_x1_get, METH_VARARGS, NULL },
	 { (char *)"rect_y1_set", _wrap_rect_y1_set, METH_VARARGS, NULL },
	 { (char *)"rect_y1_get", _wrap_rect_y1_get, METH_VARARGS, NULL },
	 { (char *)"rect_x2_set", _wrap_rect_x2_set, METH_VARARGS, NULL },
	 { (char *)"rect_x2_get", _wrap_rect_x2_get, METH_VARARGS, NULL },
	 { (char *)"rect_y2_set", _wrap_rect_y2_set, METH_VARARGS, NULL },
	 { (char *)"rect_y2_get", _wrap_rect_y2_get, METH_VARARGS, NULL },
	 { (char *)"new_rect", _wrap_new_rect, METH_VARARGS, NULL },
	 { (char *)"rect_normalize", _wrap_rect_normalize, METH_VARARGS, NULL },
	 { (char *)"rect_clip", _wrap_rect_clip, METH_VARARGS, NULL },
	 { (char *)"rect_is_valid", _wrap_rect_is_valid, METH_VARARGS, NULL },
	 { (char *)"delete_rect", _wrap_delete_rect, METH_VARARGS, NULL },
	 { (char *)"rect_swigregister", rect_swigregister, METH_VARARGS, NULL },
	 { (char *)"rect_d_x1_set", _wrap_rect_d_x1_set, METH_VARARGS, NULL },
	 { (char *)"rect_d_x1_get", _wrap_rect_d_x1_get, METH_VARARGS, NULL },
	 { (char *)"rect_d_y1_set", _wrap_rect_d_y1_set, METH_VARARGS, NULL },
	 { (char *)"rect_d_y1_get", _wrap_rect_d_y1_get, METH_VARARGS, NULL },
	 { (char *)"rect_d_x2_set", _wrap_rect_d_x2_set, METH_VARARGS, NULL },
	 { (char *)"rect_d_x2_get", _wrap_rect_d_x2_get, METH_VARARGS, NULL },
	 { (char *)"rect_d_y2_set", _wrap_rect_d_y2_set, METH_VARARGS, NULL },
	 { (char *)"rect_d_y2_get", _wrap_rect_d_y2_get, METH_VARARGS, NULL },
	 { (char *)"new_rect_d", _wrap_new_rect_d, METH_VARARGS, NULL },
	 { (char *)"rect_d_normalize", _wrap_rect_d_normalize, METH_VARARGS, NULL },
	 { (char *)"rect_d_clip", _wrap_rect_d_clip, METH_VARARGS, NULL },
	 { (char *)"rect_d_is_valid", _wrap_rect_d_is_valid, METH_VARARGS, NULL },
	 { (char *)"delete_rect_d", _wrap_delete_rect_d, METH_VARARGS, NULL },
	 { (char *)"rect_d_swigregister", rect_d_swigregister, METH_VARARGS, NULL },
	 { (char *)"unite_rectangles", _wrap_unite_rectangles, METH_VARARGS, NULL },
	 { (char *)"unite_rectangles_d", _wrap_unite_rectangles_d, METH_VARARGS, NULL },
	 { (char *)"intersect_rectangles", _wrap_intersect_rectangles, METH_VARARGS, NULL },
	 { (char *)"intersect_rectangles_d", _wrap_intersect_rectangles_d, METH_VARARGS, NULL },
	 { (char *)"binary_data_size_set", _wrap_binary_data_size_set, METH_VARARGS, NULL },
	 { (char *)"binary_data_size_get", _wrap_binary_data_size_get, METH_VARARGS, NULL },
	 { (char *)"binary_data_data_set", _wrap_binary_data_data_set, METH_VARARGS, NULL },
	 { (char *)"binary_data_data_get", _wrap_binary_data_data_get, METH_VARARGS, NULL },
	 { (char *)"new_binary_data", _wrap_new_binary_data, METH_VARARGS, NULL },
	 { (char *)"delete_binary_data", _wrap_delete_binary_data, METH_VARARGS, NULL },
	 { (char *)"binary_data_swigregister", binary_data_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_buffer", _wrap_new_buffer, METH_VARARGS, NULL },
	 { (char *)"delete_buffer", _wrap_delete_buffer, METH_VARARGS, NULL },
	 { (char *)"buffer_to_string", _wrap_buffer_to_string, METH_VARARGS, NULL },
	 { (char *)"buffer_width_get", _wrap_buffer_width_get, METH_VARARGS, NULL },
	 { (char *)"buffer_height_get", _wrap_buffer_height_get, METH_VARARGS, NULL },
	 { (char *)"buffer_stride_get", _wrap_buffer_stride_get, METH_VARARGS, NULL },
	 { (char *)"buffer_data_set", _wrap_buffer_data_set, METH_VARARGS, NULL },
	 { (char *)"buffer_data_get", _wrap_buffer_data_get, METH_VARARGS, NULL },
	 { (char *)"buffer_freemem_set", _wrap_buffer_freemem_set, METH_VARARGS, NULL },
	 { (char *)"buffer_freemem_get", _wrap_buffer_freemem_get, METH_VARARGS, NULL },
	 { (char *)"buffer_swigregister", buffer_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_rgb", _wrap_new_order_rgb, METH_VARARGS, NULL },
	 { (char *)"delete_order_rgb", _wrap_delete_order_rgb, METH_VARARGS, NULL },
	 { (char *)"order_rgb_swigregister", order_rgb_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_bgr", _wrap_new_order_bgr, METH_VARARGS, NULL },
	 { (char *)"delete_order_bgr", _wrap_delete_order_bgr, METH_VARARGS, NULL },
	 { (char *)"order_bgr_swigregister", order_bgr_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_rgba", _wrap_new_order_rgba, METH_VARARGS, NULL },
	 { (char *)"delete_order_rgba", _wrap_delete_order_rgba, METH_VARARGS, NULL },
	 { (char *)"order_rgba_swigregister", order_rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_argb", _wrap_new_order_argb, METH_VARARGS, NULL },
	 { (char *)"delete_order_argb", _wrap_delete_order_argb, METH_VARARGS, NULL },
	 { (char *)"order_argb_swigregister", order_argb_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_abgr", _wrap_new_order_abgr, METH_VARARGS, NULL },
	 { (char *)"delete_order_abgr", _wrap_delete_order_abgr, METH_VARARGS, NULL },
	 { (char *)"order_abgr_swigregister", order_abgr_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_order_bgra", _wrap_new_order_bgra, METH_VARARGS, NULL },
	 { (char *)"delete_order_bgra", _wrap_delete_order_bgra, METH_VARARGS, NULL },
	 { (char *)"order_bgra_swigregister", order_bgra_swigregister, METH_VARARGS, NULL },
	 { (char *)"rgba_r_set", _wrap_rgba_r_set, METH_VARARGS, NULL },
	 { (char *)"rgba_r_get", _wrap_rgba_r_get, METH_VARARGS, NULL },
	 { (char *)"rgba_g_set", _wrap_rgba_g_set, METH_VARARGS, NULL },
	 { (char *)"rgba_g_get", _wrap_rgba_g_get, METH_VARARGS, NULL },
	 { (char *)"rgba_b_set", _wrap_rgba_b_set, METH_VARARGS, NULL },
	 { (char *)"rgba_b_get", _wrap_rgba_b_get, METH_VARARGS, NULL },
	 { (char *)"rgba_a_set", _wrap_rgba_a_set, METH_VARARGS, NULL },
	 { (char *)"rgba_a_get", _wrap_rgba_a_get, METH_VARARGS, NULL },
	 { (char *)"rgba_clear", _wrap_rgba_clear, METH_VARARGS, NULL },
	 { (char *)"rgba_transparent", _wrap_rgba_transparent, METH_VARARGS, NULL },
	 { (char *)"rgba_opacity", _wrap_rgba_opacity, METH_VARARGS, NULL },
	 { (char *)"rgba_premultiply", _wrap_rgba_premultiply, METH_VARARGS, NULL },
	 { (char *)"rgba_demultiply", _wrap_rgba_demultiply, METH_VARARGS, NULL },
	 { (char *)"rgba_gradient", _wrap_rgba_gradient, METH_VARARGS, NULL },
	 { (char *)"rgba_no_color", _wrap_rgba_no_color, METH_VARARGS, NULL },
	 { (char *)"rgba_from_wavelength", _wrap_rgba_from_wavelength, METH_VARARGS, NULL },
	 { (char *)"new_rgba", _wrap_new_rgba, METH_VARARGS, NULL },
	 { (char *)"delete_rgba", _wrap_delete_rgba, METH_VARARGS, NULL },
	 { (char *)"rgba_swigregister", rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"rgba_pre", _wrap_rgba_pre, METH_VARARGS, NULL },
	 { (char *)"rgba8_r_set", _wrap_rgba8_r_set, METH_VARARGS, NULL },
	 { (char *)"rgba8_r_get", _wrap_rgba8_r_get, METH_VARARGS, NULL },
	 { (char *)"rgba8_g_set", _wrap_rgba8_g_set, METH_VARARGS, NULL },
	 { (char *)"rgba8_g_get", _wrap_rgba8_g_get, METH_VARARGS, NULL },
	 { (char *)"rgba8_b_set", _wrap_rgba8_b_set, METH_VARARGS, NULL },
	 { (char *)"rgba8_b_get", _wrap_rgba8_b_get, METH_VARARGS, NULL },
	 { (char *)"rgba8_a_set", _wrap_rgba8_a_set, METH_VARARGS, NULL },
	 { (char *)"rgba8_a_get", _wrap_rgba8_a_get, METH_VARARGS, NULL },
	 { (char *)"new_rgba8", _wrap_new_rgba8, METH_VARARGS, NULL },
	 { (char *)"rgba8_clear", _wrap_rgba8_clear, METH_VARARGS, NULL },
	 { (char *)"rgba8_transparent", _wrap_rgba8_transparent, METH_VARARGS, NULL },
	 { (char *)"rgba8_opacity", _wrap_rgba8_opacity, METH_VARARGS, NULL },
	 { (char *)"rgba8_premultiply", _wrap_rgba8_premultiply, METH_VARARGS, NULL },
	 { (char *)"rgba8_demultiply", _wrap_rgba8_demultiply, METH_VARARGS, NULL },
	 { (char *)"rgba8_gradient", _wrap_rgba8_gradient, METH_VARARGS, NULL },
	 { (char *)"rgba8_no_color", _wrap_rgba8_no_color, METH_VARARGS, NULL },
	 { (char *)"rgba8_from_wavelength", _wrap_rgba8_from_wavelength, METH_VARARGS, NULL },
	 { (char *)"delete_rgba8", _wrap_delete_rgba8, METH_VARARGS, NULL },
	 { (char *)"rgba8_swigregister", rgba8_swigregister, METH_VARARGS, NULL },
	 { (char *)"rgba8_pre", _wrap_rgba8_pre, METH_VARARGS, NULL },
	 { (char *)"rgb8_packed", _wrap_rgb8_packed, METH_VARARGS, NULL },
	 { (char *)"bgr8_packed", _wrap_bgr8_packed, METH_VARARGS, NULL },
	 { (char *)"argb8_packed", _wrap_argb8_packed, METH_VARARGS, NULL },
	 { (char *)"rgba16_r_set", _wrap_rgba16_r_set, METH_VARARGS, NULL },
	 { (char *)"rgba16_r_get", _wrap_rgba16_r_get, METH_VARARGS, NULL },
	 { (char *)"rgba16_g_set", _wrap_rgba16_g_set, METH_VARARGS, NULL },
	 { (char *)"rgba16_g_get", _wrap_rgba16_g_get, METH_VARARGS, NULL },
	 { (char *)"rgba16_b_set", _wrap_rgba16_b_set, METH_VARARGS, NULL },
	 { (char *)"rgba16_b_get", _wrap_rgba16_b_get, METH_VARARGS, NULL },
	 { (char *)"rgba16_a_set", _wrap_rgba16_a_set, METH_VARARGS, NULL },
	 { (char *)"rgba16_a_get", _wrap_rgba16_a_get, METH_VARARGS, NULL },
	 { (char *)"new_rgba16", _wrap_new_rgba16, METH_VARARGS, NULL },
	 { (char *)"rgba16_clear", _wrap_rgba16_clear, METH_VARARGS, NULL },
	 { (char *)"rgba16_transparent", _wrap_rgba16_transparent, METH_VARARGS, NULL },
	 { (char *)"rgba16_opacity", _wrap_rgba16_opacity, METH_VARARGS, NULL },
	 { (char *)"rgba16_premultiply", _wrap_rgba16_premultiply, METH_VARARGS, NULL },
	 { (char *)"rgba16_demultiply", _wrap_rgba16_demultiply, METH_VARARGS, NULL },
	 { (char *)"rgba16_gradient", _wrap_rgba16_gradient, METH_VARARGS, NULL },
	 { (char *)"rgba16_no_color", _wrap_rgba16_no_color, METH_VARARGS, NULL },
	 { (char *)"rgba16_from_wavelength", _wrap_rgba16_from_wavelength, METH_VARARGS, NULL },
	 { (char *)"delete_rgba16", _wrap_delete_rgba16, METH_VARARGS, NULL },
	 { (char *)"rgba16_swigregister", rgba16_swigregister, METH_VARARGS, NULL },
	 { (char *)"rgba16_pre", _wrap_rgba16_pre, METH_VARARGS, NULL },
	 { (char *)"new_trans_affine", _wrap_new_trans_affine, METH_VARARGS, NULL },
	 { (char *)"trans_affine_parl_to_parl", _wrap_trans_affine_parl_to_parl, METH_VARARGS, NULL },
	 { (char *)"trans_affine_rect_to_parl", _wrap_trans_affine_rect_to_parl, METH_VARARGS, NULL },
	 { (char *)"trans_affine_parl_to_rect", _wrap_trans_affine_parl_to_rect, METH_VARARGS, NULL },
	 { (char *)"trans_affine_reset", _wrap_trans_affine_reset, METH_VARARGS, NULL },
	 { (char *)"trans_affine_multiply", _wrap_trans_affine_multiply, METH_VARARGS, NULL },
	 { (char *)"trans_affine_premultiply", _wrap_trans_affine_premultiply, METH_VARARGS, NULL },
	 { (char *)"trans_affine_invert", _wrap_trans_affine_invert, METH_VARARGS, NULL },
	 { (char *)"trans_affine_flip_x", _wrap_trans_affine_flip_x, METH_VARARGS, NULL },
	 { (char *)"trans_affine_flip_y", _wrap_trans_affine_flip_y, METH_VARARGS, NULL },
	 { (char *)"trans_affine_as_vec6", _wrap_trans_affine_as_vec6, METH_VARARGS, NULL },
	 { (char *)"trans_affine_load_from", _wrap_trans_affine_load_from, METH_VARARGS, NULL },
	 { (char *)"trans_affine___imul__", _wrap_trans_affine___imul__, METH_VARARGS, NULL },
	 { (char *)"trans_affine___mul__", _wrap_trans_affine___mul__, METH_VARARGS, NULL },
	 { (char *)"trans_affine___invert__", _wrap_trans_affine___invert__, METH_VARARGS, NULL },
	 { (char *)"trans_affine___eq__", _wrap_trans_affine___eq__, METH_VARARGS, NULL },
	 { (char *)"trans_affine___ne__", _wrap_trans_affine___ne__, METH_VARARGS, NULL },
	 { (char *)"trans_affine_transform", _wrap_trans_affine_transform, METH_VARARGS, NULL },
	 { (char *)"trans_affine_inverse_transform", _wrap_trans_affine_inverse_transform, METH_VARARGS, NULL },
	 { (char *)"trans_affine_determinant", _wrap_trans_affine_determinant, METH_VARARGS, NULL },
	 { (char *)"trans_affine_scale", _wrap_trans_affine_scale, METH_VARARGS, NULL },
	 { (char *)"trans_affine_is_identity", _wrap_trans_affine_is_identity, METH_VARARGS, NULL },
	 { (char *)"trans_affine_is_equal", _wrap_trans_affine_is_equal, METH_VARARGS, NULL },
	 { (char *)"trans_affine_get_rotation", _wrap_trans_affine_get_rotation, METH_VARARGS, NULL },
	 { (char *)"trans_affine_get_translation", _wrap_trans_affine_get_translation, METH_VARARGS, NULL },
	 { (char *)"trans_affine_get_scaling", _wrap_trans_affine_get_scaling, METH_VARARGS, NULL },
	 { (char *)"delete_trans_affine", _wrap_delete_trans_affine, METH_VARARGS, NULL },
	 { (char *)"trans_affine_swigregister", trans_affine_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_trans_affine_rotation", _wrap_new_trans_affine_rotation, METH_VARARGS, NULL },
	 { (char *)"delete_trans_affine_rotation", _wrap_delete_trans_affine_rotation, METH_VARARGS, NULL },
	 { (char *)"trans_affine_rotation_swigregister", trans_affine_rotation_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_trans_affine_scaling", _wrap_new_trans_affine_scaling, METH_VARARGS, NULL },
	 { (char *)"delete_trans_affine_scaling", _wrap_delete_trans_affine_scaling, METH_VARARGS, NULL },
	 { (char *)"trans_affine_scaling_swigregister", trans_affine_scaling_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_trans_affine_translation", _wrap_new_trans_affine_translation, METH_VARARGS, NULL },
	 { (char *)"delete_trans_affine_translation", _wrap_delete_trans_affine_translation, METH_VARARGS, NULL },
	 { (char *)"trans_affine_translation_swigregister", trans_affine_translation_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_trans_affine_skewing", _wrap_new_trans_affine_skewing, METH_VARARGS, NULL },
	 { (char *)"delete_trans_affine_skewing", _wrap_delete_trans_affine_skewing, METH_VARARGS, NULL },
	 { (char *)"trans_affine_skewing_swigregister", trans_affine_skewing_swigregister, METH_VARARGS, NULL },
	 { (char *)"delete_path_storage", _wrap_delete_path_storage, METH_VARARGS, NULL },
	 { (char *)"new_path_storage", _wrap_new_path_storage, METH_VARARGS, NULL },
	 { (char *)"path_storage_remove_all", _wrap_path_storage_remove_all, METH_VARARGS, NULL },
	 { (char *)"path_storage_last_vertex", _wrap_path_storage_last_vertex, METH_VARARGS, NULL },
	 { (char *)"path_storage_prev_vertex", _wrap_path_storage_prev_vertex, METH_VARARGS, NULL },
	 { (char *)"path_storage_rel_to_abs", _wrap_path_storage_rel_to_abs, METH_VARARGS, NULL },
	 { (char *)"path_storage_move_to", _wrap_path_storage_move_to, METH_VARARGS, NULL },
	 { (char *)"path_storage_move_rel", _wrap_path_storage_move_rel, METH_VARARGS, NULL },
	 { (char *)"path_storage_line_to", _wrap_path_storage_line_to, METH_VARARGS, NULL },
	 { (char *)"path_storage_line_rel", _wrap_path_storage_line_rel, METH_VARARGS, NULL },
	 { (char *)"path_storage_arc_to", _wrap_path_storage_arc_to, METH_VARARGS, NULL },
	 { (char *)"path_storage_arc_rel", _wrap_path_storage_arc_rel, METH_VARARGS, NULL },
	 { (char *)"path_storage_curve3", _wrap_path_storage_curve3, METH_VARARGS, NULL },
	 { (char *)"path_storage_curve3_rel", _wrap_path_storage_curve3_rel, METH_VARARGS, NULL },
	 { (char *)"path_storage_curve4", _wrap_path_storage_curve4, METH_VARARGS, NULL },
	 { (char *)"path_storage_curve4_rel", _wrap_path_storage_curve4_rel, METH_VARARGS, NULL },
	 { (char *)"path_storage_end_poly", _wrap_path_storage_end_poly, METH_VARARGS, NULL },
	 { (char *)"path_storage_close_polygon", _wrap_path_storage_close_polygon, METH_VARARGS, NULL },
	 { (char *)"path_storage_add_poly", _wrap_path_storage_add_poly, METH_VARARGS, NULL },
	 { (char *)"path_storage_start_new_path", _wrap_path_storage_start_new_path, METH_VARARGS, NULL },
	 { (char *)"path_storage_copy_from", _wrap_path_storage_copy_from, METH_VARARGS, NULL },
	 { (char *)"path_storage_total_vertices", _wrap_path_storage_total_vertices, METH_VARARGS, NULL },
	 { (char *)"path_storage_command", _wrap_path_storage_command, METH_VARARGS, NULL },
	 { (char *)"path_storage_rewind", _wrap_path_storage_rewind, METH_VARARGS, NULL },
	 { (char *)"path_storage_vertex", _wrap_path_storage_vertex, METH_VARARGS, NULL },
	 { (char *)"path_storage_arrange_orientations", _wrap_path_storage_arrange_orientations, METH_VARARGS, NULL },
	 { (char *)"path_storage_arrange_orientations_all_paths", _wrap_path_storage_arrange_orientations_all_paths, METH_VARARGS, NULL },
	 { (char *)"path_storage_flip_x", _wrap_path_storage_flip_x, METH_VARARGS, NULL },
	 { (char *)"path_storage_flip_y", _wrap_path_storage_flip_y, METH_VARARGS, NULL },
	 { (char *)"path_storage_add_vertex", _wrap_path_storage_add_vertex, METH_VARARGS, NULL },
	 { (char *)"path_storage_modify_vertex", _wrap_path_storage_modify_vertex, METH_VARARGS, NULL },
	 { (char *)"path_storage_modify_command", _wrap_path_storage_modify_command, METH_VARARGS, NULL },
	 { (char *)"path_storage_swigregister", path_storage_swigregister, METH_VARARGS, NULL },
	 { (char *)"delete_rendering_buffer", _wrap_delete_rendering_buffer, METH_VARARGS, NULL },
	 { (char *)"new_rendering_buffer", _wrap_new_rendering_buffer, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_attach", _wrap_rendering_buffer_attach, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_buf", _wrap_rendering_buffer_buf, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_width", _wrap_rendering_buffer_width, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_height", _wrap_rendering_buffer_height, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_stride", _wrap_rendering_buffer_stride, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_stride_abs", _wrap_rendering_buffer_stride_abs, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_row", _wrap_rendering_buffer_row, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_next_row", _wrap_rendering_buffer_next_row, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_rows", _wrap_rendering_buffer_rows, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_copy_from", _wrap_rendering_buffer_copy_from, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_clear", _wrap_rendering_buffer_clear, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_attachb", _wrap_rendering_buffer_attachb, METH_VARARGS, NULL },
	 { (char *)"rendering_buffer_swigregister", rendering_buffer_swigregister, METH_VARARGS, NULL },
	 { (char *)"pixel64_type_c_set", _wrap_pixel64_type_c_set, METH_VARARGS, NULL },
	 { (char *)"pixel64_type_c_get", _wrap_pixel64_type_c_get, METH_VARARGS, NULL },
	 { (char *)"new_pixel64_type", _wrap_new_pixel64_type, METH_VARARGS, NULL },
	 { (char *)"delete_pixel64_type", _wrap_delete_pixel64_type, METH_VARARGS, NULL },
	 { (char *)"pixel64_type_swigregister", pixel64_type_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_pixel_format_rgba", _wrap_new_pixel_format_rgba, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_attach", _wrap_pixel_format_rgba_attach, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_width", _wrap_pixel_format_rgba_width, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_height", _wrap_pixel_format_rgba_height, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_pixel", _wrap_pixel_format_rgba_pixel, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_row", _wrap_pixel_format_rgba_row, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_span", _wrap_pixel_format_rgba_span, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_copy_pixel", _wrap_pixel_format_rgba_copy_pixel, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_pixel", _wrap_pixel_format_rgba_blend_pixel, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_copy_hline", _wrap_pixel_format_rgba_copy_hline, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_copy_vline", _wrap_pixel_format_rgba_copy_vline, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_hline", _wrap_pixel_format_rgba_blend_hline, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_vline", _wrap_pixel_format_rgba_blend_vline, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_solid_hspan", _wrap_pixel_format_rgba_blend_solid_hspan, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_solid_vspan", _wrap_pixel_format_rgba_blend_solid_vspan, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_copy_color_hspan", _wrap_pixel_format_rgba_copy_color_hspan, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_color_hspan", _wrap_pixel_format_rgba_blend_color_hspan, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_blend_color_vspan", _wrap_pixel_format_rgba_blend_color_vspan, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_premultiply", _wrap_pixel_format_rgba_premultiply, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_demultiply", _wrap_pixel_format_rgba_demultiply, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_copy_from", _wrap_pixel_format_rgba_copy_from, METH_VARARGS, NULL },
	 { (char *)"delete_pixel_format_rgba", _wrap_delete_pixel_format_rgba, METH_VARARGS, NULL },
	 { (char *)"pixel_format_rgba_swigregister", pixel_format_rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_renderer_base_rgba", _wrap_new_renderer_base_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_attach", _wrap_renderer_base_rgba_attach, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_ren", _wrap_renderer_base_rgba_ren, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_width", _wrap_renderer_base_rgba_width, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_height", _wrap_renderer_base_rgba_height, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_reset_clipping", _wrap_renderer_base_rgba_reset_clipping, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clip_box_naked", _wrap_renderer_base_rgba_clip_box_naked, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_inbox", _wrap_renderer_base_rgba_inbox, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_first_clip_box", _wrap_renderer_base_rgba_first_clip_box, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_next_clip_box", _wrap_renderer_base_rgba_next_clip_box, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clip_box", _wrap_renderer_base_rgba_clip_box, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_xmin", _wrap_renderer_base_rgba_xmin, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_ymin", _wrap_renderer_base_rgba_ymin, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_xmax", _wrap_renderer_base_rgba_xmax, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_ymax", _wrap_renderer_base_rgba_ymax, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_bounding_clip_box", _wrap_renderer_base_rgba_bounding_clip_box, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_bounding_xmin", _wrap_renderer_base_rgba_bounding_xmin, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_bounding_ymin", _wrap_renderer_base_rgba_bounding_ymin, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_bounding_xmax", _wrap_renderer_base_rgba_bounding_xmax, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_bounding_ymax", _wrap_renderer_base_rgba_bounding_ymax, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clear", _wrap_renderer_base_rgba_clear, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_pixel", _wrap_renderer_base_rgba_copy_pixel, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_pixel", _wrap_renderer_base_rgba_blend_pixel, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_pixel", _wrap_renderer_base_rgba_pixel, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_hline", _wrap_renderer_base_rgba_copy_hline, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_vline", _wrap_renderer_base_rgba_copy_vline, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_hline", _wrap_renderer_base_rgba_blend_hline, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_vline", _wrap_renderer_base_rgba_blend_vline, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_bar", _wrap_renderer_base_rgba_copy_bar, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_bar", _wrap_renderer_base_rgba_blend_bar, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_span", _wrap_renderer_base_rgba_span, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_solid_hspan", _wrap_renderer_base_rgba_blend_solid_hspan, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_solid_vspan", _wrap_renderer_base_rgba_blend_solid_vspan, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_color_hspan", _wrap_renderer_base_rgba_copy_color_hspan, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_color_hspan", _wrap_renderer_base_rgba_blend_color_hspan, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_color_vspan", _wrap_renderer_base_rgba_blend_color_vspan, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_color_hspan_no_clip", _wrap_renderer_base_rgba_copy_color_hspan_no_clip, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_color_hspan_no_clip", _wrap_renderer_base_rgba_blend_color_hspan_no_clip, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_blend_color_vspan_no_clip", _wrap_renderer_base_rgba_blend_color_vspan_no_clip, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clip_rect_area", _wrap_renderer_base_rgba_clip_rect_area, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_copy_from", _wrap_renderer_base_rgba_copy_from, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clear_rgba8", _wrap_renderer_base_rgba_clear_rgba8, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_clear_rgba", _wrap_renderer_base_rgba_clear_rgba, METH_VARARGS, NULL },
	 { (char *)"delete_renderer_base_rgba", _wrap_delete_renderer_base_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_base_rgba_swigregister", renderer_base_rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_curve_path", _wrap_new_conv_curve_path, METH_VARARGS, NULL },
	 { (char *)"conv_curve_path_set_source", _wrap_conv_curve_path_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_curve_path_approximation_scale", _wrap_conv_curve_path_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_curve_path_rewind", _wrap_conv_curve_path_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_curve_path_vertex", _wrap_conv_curve_path_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_curve_path", _wrap_delete_conv_curve_path, METH_VARARGS, NULL },
	 { (char *)"conv_curve_path_swigregister", conv_curve_path_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_curve_trans", _wrap_new_conv_curve_trans, METH_VARARGS, NULL },
	 { (char *)"conv_curve_trans_set_source", _wrap_conv_curve_trans_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_curve_trans_approximation_scale", _wrap_conv_curve_trans_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_curve_trans_rewind", _wrap_conv_curve_trans_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_curve_trans_vertex", _wrap_conv_curve_trans_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_curve_trans", _wrap_delete_conv_curve_trans, METH_VARARGS, NULL },
	 { (char *)"conv_curve_trans_swigregister", conv_curve_trans_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_transform_path", _wrap_new_conv_transform_path, METH_VARARGS, NULL },
	 { (char *)"conv_transform_path_set_source", _wrap_conv_transform_path_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_transform_path_rewind", _wrap_conv_transform_path_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_transform_path_vertex", _wrap_conv_transform_path_vertex, METH_VARARGS, NULL },
	 { (char *)"conv_transform_path_transformer", _wrap_conv_transform_path_transformer, METH_VARARGS, NULL },
	 { (char *)"delete_conv_transform_path", _wrap_delete_conv_transform_path, METH_VARARGS, NULL },
	 { (char *)"conv_transform_path_swigregister", conv_transform_path_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_transform_curve", _wrap_new_conv_transform_curve, METH_VARARGS, NULL },
	 { (char *)"conv_transform_curve_set_source", _wrap_conv_transform_curve_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_transform_curve_rewind", _wrap_conv_transform_curve_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_transform_curve_vertex", _wrap_conv_transform_curve_vertex, METH_VARARGS, NULL },
	 { (char *)"conv_transform_curve_transformer", _wrap_conv_transform_curve_transformer, METH_VARARGS, NULL },
	 { (char *)"delete_conv_transform_curve", _wrap_delete_conv_transform_curve, METH_VARARGS, NULL },
	 { (char *)"conv_transform_curve_swigregister", conv_transform_curve_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_vcgen_stroke", _wrap_new_vcgen_stroke, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_line_cap", _wrap_vcgen_stroke_line_cap, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_line_join", _wrap_vcgen_stroke_line_join, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_inner_line_join", _wrap_vcgen_stroke_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_miter_limit_theta", _wrap_vcgen_stroke_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_width", _wrap_vcgen_stroke_width, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_miter_limit", _wrap_vcgen_stroke_miter_limit, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_inner_miter_limit", _wrap_vcgen_stroke_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_approximation_scale", _wrap_vcgen_stroke_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_shorten", _wrap_vcgen_stroke_shorten, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_remove_all", _wrap_vcgen_stroke_remove_all, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_add_vertex", _wrap_vcgen_stroke_add_vertex, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_rewind", _wrap_vcgen_stroke_rewind, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_vertex", _wrap_vcgen_stroke_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_vcgen_stroke", _wrap_delete_vcgen_stroke, METH_VARARGS, NULL },
	 { (char *)"vcgen_stroke_swigregister", vcgen_stroke_swigregister, METH_VARARGS, NULL },
	 { (char *)"null_markers_remove_all", _wrap_null_markers_remove_all, METH_VARARGS, NULL },
	 { (char *)"null_markers_add_vertex", _wrap_null_markers_add_vertex, METH_VARARGS, NULL },
	 { (char *)"null_markers_prepare_src", _wrap_null_markers_prepare_src, METH_VARARGS, NULL },
	 { (char *)"null_markers_rewind", _wrap_null_markers_rewind, METH_VARARGS, NULL },
	 { (char *)"null_markers_vertex", _wrap_null_markers_vertex, METH_VARARGS, NULL },
	 { (char *)"new_null_markers", _wrap_new_null_markers, METH_VARARGS, NULL },
	 { (char *)"delete_null_markers", _wrap_delete_null_markers, METH_VARARGS, NULL },
	 { (char *)"null_markers_swigregister", null_markers_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_adaptor_vcgen_path", _wrap_new_conv_adaptor_vcgen_path, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_set_source", _wrap_conv_adaptor_vcgen_path_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_generator", _wrap_conv_adaptor_vcgen_path_generator, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_markers", _wrap_conv_adaptor_vcgen_path_markers, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_rewind", _wrap_conv_adaptor_vcgen_path_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_vertex", _wrap_conv_adaptor_vcgen_path_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_adaptor_vcgen_path", _wrap_delete_conv_adaptor_vcgen_path, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_path_swigregister", conv_adaptor_vcgen_path_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_adaptor_vcgen_transpath", _wrap_new_conv_adaptor_vcgen_transpath, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_set_source", _wrap_conv_adaptor_vcgen_transpath_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_generator", _wrap_conv_adaptor_vcgen_transpath_generator, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_markers", _wrap_conv_adaptor_vcgen_transpath_markers, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_rewind", _wrap_conv_adaptor_vcgen_transpath_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_vertex", _wrap_conv_adaptor_vcgen_transpath_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_adaptor_vcgen_transpath", _wrap_delete_conv_adaptor_vcgen_transpath, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transpath_swigregister", conv_adaptor_vcgen_transpath_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_adaptor_vcgen_curve", _wrap_new_conv_adaptor_vcgen_curve, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_set_source", _wrap_conv_adaptor_vcgen_curve_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_generator", _wrap_conv_adaptor_vcgen_curve_generator, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_markers", _wrap_conv_adaptor_vcgen_curve_markers, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_rewind", _wrap_conv_adaptor_vcgen_curve_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_vertex", _wrap_conv_adaptor_vcgen_curve_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_adaptor_vcgen_curve", _wrap_delete_conv_adaptor_vcgen_curve, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curve_swigregister", conv_adaptor_vcgen_curve_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_adaptor_vcgen_transcurve", _wrap_new_conv_adaptor_vcgen_transcurve, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_set_source", _wrap_conv_adaptor_vcgen_transcurve_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_generator", _wrap_conv_adaptor_vcgen_transcurve_generator, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_markers", _wrap_conv_adaptor_vcgen_transcurve_markers, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_rewind", _wrap_conv_adaptor_vcgen_transcurve_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_vertex", _wrap_conv_adaptor_vcgen_transcurve_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_adaptor_vcgen_transcurve", _wrap_delete_conv_adaptor_vcgen_transcurve, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_transcurve_swigregister", conv_adaptor_vcgen_transcurve_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_adaptor_vcgen_curvetrans", _wrap_new_conv_adaptor_vcgen_curvetrans, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_set_source", _wrap_conv_adaptor_vcgen_curvetrans_set_source, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_generator", _wrap_conv_adaptor_vcgen_curvetrans_generator, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_markers", _wrap_conv_adaptor_vcgen_curvetrans_markers, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_rewind", _wrap_conv_adaptor_vcgen_curvetrans_rewind, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_vertex", _wrap_conv_adaptor_vcgen_curvetrans_vertex, METH_VARARGS, NULL },
	 { (char *)"delete_conv_adaptor_vcgen_curvetrans", _wrap_delete_conv_adaptor_vcgen_curvetrans, METH_VARARGS, NULL },
	 { (char *)"conv_adaptor_vcgen_curvetrans_swigregister", conv_adaptor_vcgen_curvetrans_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_stroke_path", _wrap_new_conv_stroke_path, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_line_cap", _wrap_conv_stroke_path_line_cap, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_line_join", _wrap_conv_stroke_path_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_inner_line_join", _wrap_conv_stroke_path_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_miter_limit_theta", _wrap_conv_stroke_path_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_width", _wrap_conv_stroke_path_width, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_miter_limit", _wrap_conv_stroke_path_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_inner_miter_limit", _wrap_conv_stroke_path_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_approximation_scale", _wrap_conv_stroke_path_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_shorten", _wrap_conv_stroke_path_shorten, METH_VARARGS, NULL },
	 { (char *)"delete_conv_stroke_path", _wrap_delete_conv_stroke_path, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_path_swigregister", conv_stroke_path_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_stroke_transpath", _wrap_new_conv_stroke_transpath, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_line_cap", _wrap_conv_stroke_transpath_line_cap, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_line_join", _wrap_conv_stroke_transpath_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_inner_line_join", _wrap_conv_stroke_transpath_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_miter_limit_theta", _wrap_conv_stroke_transpath_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_width", _wrap_conv_stroke_transpath_width, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_miter_limit", _wrap_conv_stroke_transpath_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_inner_miter_limit", _wrap_conv_stroke_transpath_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_approximation_scale", _wrap_conv_stroke_transpath_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_shorten", _wrap_conv_stroke_transpath_shorten, METH_VARARGS, NULL },
	 { (char *)"delete_conv_stroke_transpath", _wrap_delete_conv_stroke_transpath, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transpath_swigregister", conv_stroke_transpath_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_stroke_curve", _wrap_new_conv_stroke_curve, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_line_cap", _wrap_conv_stroke_curve_line_cap, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_line_join", _wrap_conv_stroke_curve_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_inner_line_join", _wrap_conv_stroke_curve_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_miter_limit_theta", _wrap_conv_stroke_curve_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_width", _wrap_conv_stroke_curve_width, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_miter_limit", _wrap_conv_stroke_curve_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_inner_miter_limit", _wrap_conv_stroke_curve_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_approximation_scale", _wrap_conv_stroke_curve_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_shorten", _wrap_conv_stroke_curve_shorten, METH_VARARGS, NULL },
	 { (char *)"delete_conv_stroke_curve", _wrap_delete_conv_stroke_curve, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curve_swigregister", conv_stroke_curve_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_stroke_transcurve", _wrap_new_conv_stroke_transcurve, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_line_cap", _wrap_conv_stroke_transcurve_line_cap, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_line_join", _wrap_conv_stroke_transcurve_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_inner_line_join", _wrap_conv_stroke_transcurve_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_miter_limit_theta", _wrap_conv_stroke_transcurve_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_width", _wrap_conv_stroke_transcurve_width, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_miter_limit", _wrap_conv_stroke_transcurve_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_inner_miter_limit", _wrap_conv_stroke_transcurve_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_approximation_scale", _wrap_conv_stroke_transcurve_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_shorten", _wrap_conv_stroke_transcurve_shorten, METH_VARARGS, NULL },
	 { (char *)"delete_conv_stroke_transcurve", _wrap_delete_conv_stroke_transcurve, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_transcurve_swigregister", conv_stroke_transcurve_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_conv_stroke_curvetrans", _wrap_new_conv_stroke_curvetrans, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_line_cap", _wrap_conv_stroke_curvetrans_line_cap, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_line_join", _wrap_conv_stroke_curvetrans_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_inner_line_join", _wrap_conv_stroke_curvetrans_inner_line_join, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_miter_limit_theta", _wrap_conv_stroke_curvetrans_miter_limit_theta, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_width", _wrap_conv_stroke_curvetrans_width, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_miter_limit", _wrap_conv_stroke_curvetrans_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_inner_miter_limit", _wrap_conv_stroke_curvetrans_inner_miter_limit, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_approximation_scale", _wrap_conv_stroke_curvetrans_approximation_scale, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_shorten", _wrap_conv_stroke_curvetrans_shorten, METH_VARARGS, NULL },
	 { (char *)"delete_conv_stroke_curvetrans", _wrap_delete_conv_stroke_curvetrans, METH_VARARGS, NULL },
	 { (char *)"conv_stroke_curvetrans_swigregister", conv_stroke_curvetrans_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_rasterizer_scanline_aa", _wrap_new_rasterizer_scanline_aa, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_reset", _wrap_rasterizer_scanline_aa_reset, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_filling_rule", _wrap_rasterizer_scanline_aa_filling_rule, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_clip_box", _wrap_rasterizer_scanline_aa_clip_box, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_reset_clipping", _wrap_rasterizer_scanline_aa_reset_clipping, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_apply_gamma", _wrap_rasterizer_scanline_aa_apply_gamma, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_add_vertex", _wrap_rasterizer_scanline_aa_add_vertex, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_move_to", _wrap_rasterizer_scanline_aa_move_to, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_line_to", _wrap_rasterizer_scanline_aa_line_to, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_close_polygon", _wrap_rasterizer_scanline_aa_close_polygon, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_move_to_d", _wrap_rasterizer_scanline_aa_move_to_d, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_line_to_d", _wrap_rasterizer_scanline_aa_line_to_d, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_min_x", _wrap_rasterizer_scanline_aa_min_x, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_min_y", _wrap_rasterizer_scanline_aa_min_y, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_max_x", _wrap_rasterizer_scanline_aa_max_x, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_max_y", _wrap_rasterizer_scanline_aa_max_y, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_calculate_alpha", _wrap_rasterizer_scanline_aa_calculate_alpha, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_sort", _wrap_rasterizer_scanline_aa_sort, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_rewind_scanlines", _wrap_rasterizer_scanline_aa_rewind_scanlines, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_hit_test", _wrap_rasterizer_scanline_aa_hit_test, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_add_path", _wrap_rasterizer_scanline_aa_add_path, METH_VARARGS, NULL },
	 { (char *)"delete_rasterizer_scanline_aa", _wrap_delete_rasterizer_scanline_aa, METH_VARARGS, NULL },
	 { (char *)"rasterizer_scanline_aa_swigregister", rasterizer_scanline_aa_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_renderer_scanline_aa_solid_rgba", _wrap_new_renderer_scanline_aa_solid_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_attach", _wrap_renderer_scanline_aa_solid_rgba_attach, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_color", _wrap_renderer_scanline_aa_solid_rgba_color, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_prepare", _wrap_renderer_scanline_aa_solid_rgba_prepare, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_color_rgba8", _wrap_renderer_scanline_aa_solid_rgba_color_rgba8, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_color_rgba", _wrap_renderer_scanline_aa_solid_rgba_color_rgba, METH_VARARGS, NULL },
	 { (char *)"delete_renderer_scanline_aa_solid_rgba", _wrap_delete_renderer_scanline_aa_solid_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_aa_solid_rgba_swigregister", renderer_scanline_aa_solid_rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_renderer_scanline_bin_solid_rgba", _wrap_new_renderer_scanline_bin_solid_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_attach", _wrap_renderer_scanline_bin_solid_rgba_attach, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_color", _wrap_renderer_scanline_bin_solid_rgba_color, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_prepare", _wrap_renderer_scanline_bin_solid_rgba_prepare, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_color_rgba8", _wrap_renderer_scanline_bin_solid_rgba_color_rgba8, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_color_rgba", _wrap_renderer_scanline_bin_solid_rgba_color_rgba, METH_VARARGS, NULL },
	 { (char *)"delete_renderer_scanline_bin_solid_rgba", _wrap_delete_renderer_scanline_bin_solid_rgba, METH_VARARGS, NULL },
	 { (char *)"renderer_scanline_bin_solid_rgba_swigregister", renderer_scanline_bin_solid_rgba_swigregister, METH_VARARGS, NULL },
	 { (char *)"delete_scanline_p8", _wrap_delete_scanline_p8, METH_VARARGS, NULL },
	 { (char *)"new_scanline_p8", _wrap_new_scanline_p8, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_reset", _wrap_scanline_p8_reset, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_add_cell", _wrap_scanline_p8_add_cell, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_add_cells", _wrap_scanline_p8_add_cells, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_add_span", _wrap_scanline_p8_add_span, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_finalize", _wrap_scanline_p8_finalize, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_reset_spans", _wrap_scanline_p8_reset_spans, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_y", _wrap_scanline_p8_y, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_num_spans", _wrap_scanline_p8_num_spans, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_begin", _wrap_scanline_p8_begin, METH_VARARGS, NULL },
	 { (char *)"scanline_p8_swigregister", scanline_p8_swigregister, METH_VARARGS, NULL },
	 { (char *)"delete_scanline_bin", _wrap_delete_scanline_bin, METH_VARARGS, NULL },
	 { (char *)"new_scanline_bin", _wrap_new_scanline_bin, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_reset", _wrap_scanline_bin_reset, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_add_cell", _wrap_scanline_bin_add_cell, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_add_span", _wrap_scanline_bin_add_span, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_add_cells", _wrap_scanline_bin_add_cells, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_finalize", _wrap_scanline_bin_finalize, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_reset_spans", _wrap_scanline_bin_reset_spans, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_y", _wrap_scanline_bin_y, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_num_spans", _wrap_scanline_bin_num_spans, METH_VARARGS, NULL },
	 { (char *)"scanline_bin_swigregister", scanline_bin_swigregister, METH_VARARGS, NULL },
	 { (char *)"delete_scanline32_bin", _wrap_delete_scanline32_bin, METH_VARARGS, NULL },
	 { (char *)"new_scanline32_bin", _wrap_new_scanline32_bin, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_reset", _wrap_scanline32_bin_reset, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_add_cell", _wrap_scanline32_bin_add_cell, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_add_span", _wrap_scanline32_bin_add_span, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_add_cells", _wrap_scanline32_bin_add_cells, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_finalize", _wrap_scanline32_bin_finalize, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_reset_spans", _wrap_scanline32_bin_reset_spans, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_y", _wrap_scanline32_bin_y, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_num_spans", _wrap_scanline32_bin_num_spans, METH_VARARGS, NULL },
	 { (char *)"scanline32_bin_swigregister", scanline32_bin_swigregister, METH_VARARGS, NULL },
	 { (char *)"render_scanlines_rgba", _wrap_render_scanlines_rgba, METH_VARARGS, NULL },
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_agg__trans_affine_scalingTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_scaling *) x));
}
static void *_p_agg__trans_affine_skewingTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_skewing *) x));
}
static void *_p_agg__trans_affine_translationTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_translation *) x));
}
static void *_p_agg__trans_affine_rotationTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_rotation *) x));
}
static void *_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t(void *x) {
    return (void *)((agg::conv_adaptor_vcgen<agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine >,agg::vcgen_stroke,agg::null_markers > *)  ((agg::conv_stroke<agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine > > *) x));
}
static void *_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t(void *x) {
    return (void *)((agg::conv_adaptor_vcgen<agg::conv_transform<agg::path_storage,agg::trans_affine >,agg::vcgen_stroke,agg::null_markers > *)  ((agg::conv_stroke<agg::conv_transform<agg::path_storage,agg::trans_affine > > *) x));
}
static void *_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t(void *x) {
    return (void *)((agg::conv_adaptor_vcgen<agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > >,agg::vcgen_stroke,agg::null_markers > *)  ((agg::conv_stroke<agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > > > *) x));
}
static void *_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t(void *x) {
    return (void *)((agg::conv_adaptor_vcgen<agg::conv_curve<agg::path_storage >,agg::vcgen_stroke,agg::null_markers > *)  ((agg::conv_stroke<agg::conv_curve<agg::path_storage > > *) x));
}
static void *_p_agg__conv_strokeTagg__path_storage_tTo_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t(void *x) {
    return (void *)((agg::conv_adaptor_vcgen<agg::path_storage,agg::vcgen_stroke,agg::null_markers > *)  ((agg::conv_stroke<agg::path_storage > *) x));
}
static swig_type_info _swigt__p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t[] = {{"_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t", 0, "agg::conv_adaptor_vcgen<agg::path_storage,agg::vcgen_stroke,agg::null_markers > *|agg::conv_adaptor_vcgen<path_t,agg::vcgen_stroke,agg::null_markers > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__path_storage_t", _p_agg__conv_strokeTagg__path_storage_tTo_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{"_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t", 0, 0, 0, 0, 0, 0},{"_p_stroke_t", _p_agg__conv_strokeTagg__path_storage_tTo_p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t[] = {{"_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t", 0, "agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > *|agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::base_ren_type *", 0, 0, 0, 0},{"_p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_abgr[] = {{"_p_agg__order_abgr", 0, "agg::order_abgr *", 0, 0, 0, 0},{"_p_agg__order_abgr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_stroke_t[] = {{"_p_stroke_t", 0, "agg::conv_stroke<agg::path_storage > *|stroke_t *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__path_storage_t", 0, 0, 0, 0, 0, 0},{"_p_stroke_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_rgb[] = {{"_p_agg__order_rgb", 0, "agg::order_rgb *", 0, 0, 0, 0},{"_p_agg__order_rgb", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t[] = {{"_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t", 0, "agg::conv_stroke<agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > > > *|agg::conv_stroke<curvetrans_t > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t", 0, 0, 0, 0, 0, 0},{"_p_strokecurvetrans_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rgba16[] = {{"_p_agg__rgba16", 0, "agg::rgba16 *", 0, 0, 0, 0},{"_p_agg__rgba16", 0, 0, 0, 0, 0, 0},{"_p_agg__rgba16__self_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rendering_buffer[] = {{"_p_agg__rendering_buffer", 0, "agg::row_ptr_cache<unsigned char > const *|agg::rendering_buffer const *", 0, 0, 0, 0},{"_p_agg__rendering_buffer", 0, 0, 0, 0, 0, 0},{"_p_agg__row_ptr_cacheTunsigned_char_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__buffer[] = {{"_p_agg__buffer", 0, "agg::buffer *", 0, 0, 0, 0},{"_p_agg__buffer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__trans_affine[] = {{"_p_agg__trans_affine", 0, "agg::trans_affine *", 0, 0, 0, 0},{"_p_agg__trans_affine_scaling", _p_agg__trans_affine_scalingTo_p_agg__trans_affine, 0, 0, 0, 0, 0},{"_p_agg__trans_affine", 0, 0, 0, 0, 0, 0},{"_p_agg__trans_affine_skewing", _p_agg__trans_affine_skewingTo_p_agg__trans_affine, 0, 0, 0, 0, 0},{"_p_agg__trans_affine_translation", _p_agg__trans_affine_translationTo_p_agg__trans_affine, 0, 0, 0, 0, 0},{"_p_agg__trans_affine_rotation", _p_agg__trans_affine_rotationTo_p_agg__trans_affine, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rect_d[] = {{"_p_agg__rect_d", 0, "agg::rect_base<double > *|agg::rect_d *", 0, 0, 0, 0},{"_p_agg__rect_baseTdouble_t", 0, 0, 0, 0, 0, 0},{"_p_agg__rect_d", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t[] = {{"_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, "agg::conv_stroke<agg::conv_transform<agg::path_storage,agg::trans_affine > > *|agg::conv_stroke<transpath_t > *", 0, 0, 0, 0},{"_p_stroketrans_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_argb[] = {{"_p_agg__order_argb", 0, "agg::order_argb *", 0, 0, 0, 0},{"_p_agg__order_argb", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__trans_affine_translation[] = {{"_p_agg__trans_affine_translation", 0, "agg::trans_affine_translation *", 0, 0, 0, 0},{"_p_agg__trans_affine_translation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type[] = {{"_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type", 0, "agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::blender_type::color_type const *|agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > >::color_type const *", 0, 0, 0, 0},{"_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t[] = {{"_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t", 0, "agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > *|agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::pixfmt_type *", 0, 0, 0, 0},{"_p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_strokecurvetrans_t[] = {{"_p_strokecurvetrans_t", 0, "agg::conv_stroke<agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > > > *|strokecurvetrans_t *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t", 0, 0, 0, 0, 0, 0},{"_p_strokecurvetrans_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_stroketrans_t[] = {{"_p_stroketrans_t", 0, "agg::conv_stroke<agg::conv_transform<agg::path_storage,agg::trans_affine > > *|stroketrans_t *", 0, 0, 0, 0},{"_p_stroketrans_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_curvetrans_t[] = {{"_p_curvetrans_t", 0, "agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > > *|curvetrans_t *", 0, 0, 0, 0},{"_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{"_p_curvetrans_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_stroketranscurve_t[] = {{"_p_stroketranscurve_t", 0, "agg::conv_stroke<agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine > > *|stroketranscurve_t *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{"_p_stroketranscurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_strokecurve_t[] = {{"_p_strokecurve_t", 0, "agg::conv_stroke<agg::conv_curve<agg::path_storage > > *|strokecurve_t *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t", 0, 0, 0, 0, 0, 0},{"_p_strokecurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_transcurve_t[] = {{"_p_transcurve_t", 0, "agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine > *|transcurve_t *", 0, 0, 0, 0},{"_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t", 0, 0, 0, 0, 0, 0},{"_p_transcurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_curve_t[] = {{"_p_curve_t", 0, "agg::conv_curve<agg::path_storage > *|curve_t *", 0, 0, 0, 0},{"_p_agg__conv_curveTagg__path_storage_t", 0, 0, 0, 0, 0, 0},{"_p_curve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_rasterizer_scanline_aaT_t[] = {{"_p_rasterizer_scanline_aaT_t", 0, "rasterizer_scanline_aa< > *|agg::rasterizer_scanline_aa< > *", 0, 0, 0, 0},{"_p_rasterizer_scanline_aaT_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__scanline_bin[] = {{"_p_agg__scanline_bin", 0, "agg::scanline_bin *", 0, 0, 0, 0},{"_p_agg__scanline_bin", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t[] = {{"_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t", 0, "agg::conv_adaptor_vcgen<agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine >,agg::vcgen_stroke,agg::null_markers > *|agg::conv_adaptor_vcgen<transcurve_t,agg::vcgen_stroke,agg::null_markers > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t", _p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{"_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t", 0, 0, 0, 0, 0, 0},{"_p_stroketranscurve_t", _p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t[] = {{"_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t", 0, "agg::conv_adaptor_vcgen<agg::conv_transform<agg::path_storage,agg::trans_affine >,agg::vcgen_stroke,agg::null_markers > *|agg::conv_adaptor_vcgen<transpath_t,agg::vcgen_stroke,agg::null_markers > *", 0, 0, 0, 0},{"_p_stroketrans_t", _p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{"_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", _p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__path_storage[] = {{"_p_agg__path_storage", 0, "agg::path_storage *", 0, 0, 0, 0},{"_p_path_t", 0, 0, 0, 0, 0, 0},{"_p_agg__path_storage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__vcgen_stroke[] = {{"_p_agg__vcgen_stroke", 0, "agg::vcgen_stroke *", 0, 0, 0, 0},{"_p_agg__vcgen_stroke", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0, 0, 0, 0},{"_p_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__trans_affine_rotation[] = {{"_p_agg__trans_affine_rotation", 0, "agg::trans_affine_rotation *", 0, 0, 0, 0},{"_p_agg__trans_affine_rotation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rect[] = {{"_p_agg__rect", 0, "agg::rect_base<int > const *|agg::rect const *", 0, 0, 0, 0},{"_p_agg__rect", 0, 0, 0, 0, 0, 0},{"_p_agg__rect_baseTint_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t[] = {{"_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t", 0, "agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine > *|agg::conv_transform<curve_t,agg::trans_affine > *", 0, 0, 0, 0},{"_p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t", 0, 0, 0, 0, 0, 0},{"_p_transcurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t[] = {{"_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, "agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > > *|agg::conv_curve<transpath_t > *", 0, 0, 0, 0},{"_p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{"_p_curvetrans_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rect_baseTint_t[] = {{"_p_agg__rect_baseTint_t", 0, "agg::rect_base<int > *", 0, 0, 0, 0},{"_p_agg__rect", 0, 0, 0, 0, 0, 0},{"_p_agg__rect_baseTint_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__null_markers[] = {{"_p_agg__null_markers", 0, "agg::null_markers *", 0, 0, 0, 0},{"_p_agg__null_markers", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_agg__int8u[] = {{"_p_p_agg__int8u", 0, "unsigned char const *const *|agg::int8u const *const *", 0, 0, 0, 0},{"_p_p_agg__int8u", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__int8u[] = {{"_p_agg__int8u", 0, "unsigned char const *|agg::int8u const *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{"_p_agg__cover_type", 0, 0, 0, 0, 0, 0},{"_p_agg__int8u", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__vertex_type[] = {{"_p_agg__vertex_type", 0, "agg::vertex_type *", 0, 0, 0, 0},{"_p_agg__vertex_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_transpath_t[] = {{"_p_transpath_t", 0, "agg::conv_transform<agg::path_storage,agg::trans_affine > *|transpath_t *", 0, 0, 0, 0},{"_p_transpath_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_path_t[] = {{"_p_path_t", 0, "agg::path_storage *|path_t *", 0, 0, 0, 0},{"_p_path_t", 0, 0, 0, 0, 0, 0},{"_p_agg__path_storage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rgba8__self_type[] = {{"_p_agg__rgba8__self_type", 0, "agg::rgba8 *|agg::rgba8::self_type *", 0, 0, 0, 0},{"_p_agg__rgba8", 0, 0, 0, 0, 0, 0},{"_p_agg__rgba8__self_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rgba16__self_type[] = {{"_p_agg__rgba16__self_type", 0, "agg::rgba16 *|agg::rgba16::self_type *", 0, 0, 0, 0},{"_p_agg__rgba16", 0, 0, 0, 0, 0, 0},{"_p_agg__rgba16__self_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rgba8[] = {{"_p_agg__rgba8", 0, "agg::rgba8 *", 0, 0, 0, 0},{"_p_agg__rgba8", 0, 0, 0, 0, 0, 0},{"_p_agg__rgba8__self_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__pixel64_type[] = {{"_p_agg__pixel64_type", 0, "agg::pixel64_type *", 0, 0, 0, 0},{"_p_agg__pixel64_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__point_type[] = {{"_p_agg__point_type", 0, "agg::point_type *", 0, 0, 0, 0},{"_p_agg__point_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__cover_type[] = {{"_p_agg__cover_type", 0, "unsigned char const *|agg::cover_type const *", 0, 0, 0, 0},{"_p_agg__cover_type", 0, 0, 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{"_p_agg__int8u", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t[] = {{"_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t", 0, "agg::renderer_scanline_aa_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > > *|agg::renderer_scanline_aa_solid<renderer_base_rgba_t > *", 0, 0, 0, 0},{"_p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__scanline_pTunsigned_char_t[] = {{"_p_agg__scanline_pTunsigned_char_t", 0, "agg::scanline_p<unsigned char > *|agg::scanline_p<agg::int8u > *", 0, 0, 0, 0},{"_p_agg__scanline_pTunsigned_char_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__row_ptr_cacheTunsigned_char_t[] = {{"_p_agg__row_ptr_cacheTunsigned_char_t", 0, "agg::row_ptr_cache<unsigned char > *|agg::row_ptr_cache<agg::int8u > *", 0, 0, 0, 0},{"_p_agg__rendering_buffer", 0, 0, 0, 0, 0, 0},{"_p_agg__row_ptr_cacheTunsigned_char_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t[] = {{"_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t", 0, "agg::conv_stroke<agg::conv_transform<agg::conv_curve<agg::path_storage >,agg::trans_affine > > *|agg::conv_stroke<transcurve_t > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t", 0, 0, 0, 0, 0, 0},{"_p_stroketranscurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_transformTagg__path_storage_agg__trans_affine_t[] = {{"_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t", 0, "agg::conv_transform<agg::path_storage,agg::trans_affine > *|agg::conv_transform<path_t,agg::trans_affine > *", 0, 0, 0, 0},{"_p_transpath_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_transformTagg__path_storage_agg__trans_affine_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rect_baseTdouble_t[] = {{"_p_agg__rect_baseTdouble_t", 0, "agg::rect_base<double > *", 0, 0, 0, 0},{"_p_agg__rect_baseTdouble_t", 0, 0, 0, 0, 0, 0},{"_p_agg__rect_d", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_strokeTagg__path_storage_t[] = {{"_p_agg__conv_strokeTagg__path_storage_t", 0, "agg::conv_stroke<agg::path_storage > *|agg::conv_stroke<path_t > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__path_storage_t", 0, 0, 0, 0, 0, 0},{"_p_stroke_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_curveTagg__path_storage_t[] = {{"_p_agg__conv_curveTagg__path_storage_t", 0, "agg::conv_curve<agg::path_storage > *|agg::conv_curve<path_t > *", 0, 0, 0, 0},{"_p_agg__conv_curveTagg__path_storage_t", 0, 0, 0, 0, 0, 0},{"_p_curve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__trans_affine_scaling[] = {{"_p_agg__trans_affine_scaling", 0, "agg::trans_affine_scaling *", 0, 0, 0, 0},{"_p_agg__trans_affine_scaling", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__filling_rule_e[] = {{"_p_agg__filling_rule_e", 0, "agg::filling_rule_e *", 0, 0, 0, 0},{"_p_agg__filling_rule_e", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__binary_data[] = {{"_p_agg__binary_data", 0, "agg::binary_data *", 0, 0, 0, 0},{"_p_agg__binary_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rgba[] = {{"_p_agg__rgba", 0, "agg::rgba *", 0, 0, 0, 0},{"_p_agg__rgba", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rendering_buffer__row_data[] = {{"_p_agg__rendering_buffer__row_data", 0, "agg::rendering_buffer::row_data *|agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int >::row_data *", 0, 0, 0, 0},{"_p_agg__rendering_buffer__row_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t[] = {{"_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t", 0, "agg::conv_adaptor_vcgen<agg::conv_curve<agg::conv_transform<agg::path_storage,agg::trans_affine > >,agg::vcgen_stroke,agg::null_markers > *|agg::conv_adaptor_vcgen<curvetrans_t,agg::vcgen_stroke,agg::null_markers > *", 0, 0, 0, 0},{"_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t", 0, 0, 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t", _p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{"_p_strokecurvetrans_t", _p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__scanline32_bin[] = {{"_p_agg__scanline32_bin", 0, "agg::scanline32_bin *", 0, 0, 0, 0},{"_p_agg__scanline32_bin", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t[] = {{"_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t", 0, "agg::renderer_scanline_bin_solid<agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > > > *|agg::renderer_scanline_bin_solid<renderer_base_rgba_t > *", 0, 0, 0, 0},{"_p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t[] = {{"_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t", 0, "agg::conv_adaptor_vcgen<agg::conv_curve<agg::path_storage >,agg::vcgen_stroke,agg::null_markers > *|agg::conv_adaptor_vcgen<curve_t,agg::vcgen_stroke,agg::null_markers > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t", _p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{"_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t", 0, 0, 0, 0, 0, 0},{"_p_strokecurve_t", _p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_tTo_p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_span[] = {{"_p_span", 0, "span const *|agg::scanline_p<unsigned char >::const_iterator", 0, 0, 0, 0},{"_p_span", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_bgra[] = {{"_p_agg__order_bgra", 0, "agg::order_bgra *", 0, 0, 0, 0},{"_p_agg__order_bgra", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__rendering_buffer__span_data[] = {{"_p_agg__rendering_buffer__span_data", 0, "agg::rendering_buffer::span_data *|agg::renderer_base<agg::pixel_formats_rgba<agg::blender_rgba<agg::rgba8,agg::order_rgba >,unsigned int > >::span_data *", 0, 0, 0, 0},{"_p_agg__rendering_buffer__span_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__trans_affine_skewing[] = {{"_p_agg__trans_affine_skewing", 0, "agg::trans_affine_skewing *", 0, 0, 0, 0},{"_p_agg__trans_affine_skewing", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_bgr[] = {{"_p_agg__order_bgr", 0, "agg::order_bgr *", 0, 0, 0, 0},{"_p_agg__order_bgr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__int16u[] = {{"_p_agg__int16u", 0, "unsigned short [4]|agg::int16u [4]", 0, 0, 0, 0},{"_p_agg__int16u", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{"_p_agg__cover_type", 0, 0, 0, 0, 0, 0},{"_p_agg__int8u", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t[] = {{"_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t", 0, "agg::conv_stroke<agg::conv_curve<agg::path_storage > > *|agg::conv_stroke<curve_t > *", 0, 0, 0, 0},{"_p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t", 0, 0, 0, 0, 0, 0},{"_p_strokecurve_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_agg__order_rgba[] = {{"_p_agg__order_rgba", 0, "agg::order_rgba *", 0, 0, 0, 0},{"_p_agg__order_rgba", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_agg__conv_adaptor_vcgenTagg__path_storage_agg__vcgen_stroke_agg__null_markers_t, 
_swigt__p_agg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t, 
_swigt__p_agg__order_abgr, 
_swigt__p_stroke_t, 
_swigt__p_agg__order_rgb, 
_swigt__p_agg__conv_strokeTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_t, 
_swigt__p_agg__rgba16, 
_swigt__p_agg__rendering_buffer, 
_swigt__p_agg__buffer, 
_swigt__p_agg__trans_affine, 
_swigt__p_agg__rect_d, 
_swigt__p_agg__conv_strokeTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 
_swigt__p_agg__order_argb, 
_swigt__p_agg__trans_affine_translation, 
_swigt__p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t__blender_type__color_type, 
_swigt__p_agg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t, 
_swigt__p_strokecurvetrans_t, 
_swigt__p_stroketrans_t, 
_swigt__p_curvetrans_t, 
_swigt__p_stroketranscurve_t, 
_swigt__p_strokecurve_t, 
_swigt__p_transcurve_t, 
_swigt__p_curve_t, 
_swigt__p_rasterizer_scanline_aaT_t, 
_swigt__p_agg__scanline_bin, 
_swigt__p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 
_swigt__p_agg__conv_adaptor_vcgenTagg__conv_transformTagg__path_storage_agg__trans_affine_t_agg__vcgen_stroke_agg__null_markers_t, 
_swigt__p_agg__path_storage, 
_swigt__p_agg__vcgen_stroke, 
_swigt__p_double, 
_swigt__p_agg__trans_affine_rotation, 
_swigt__p_agg__rect, 
_swigt__p_agg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t, 
_swigt__p_agg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t, 
_swigt__p_agg__rect_baseTint_t, 
_swigt__p_agg__null_markers, 
_swigt__p_p_agg__int8u, 
_swigt__p_agg__int8u, 
_swigt__p_agg__vertex_type, 
_swigt__p_transpath_t, 
_swigt__p_path_t, 
_swigt__p_agg__rgba8__self_type, 
_swigt__p_agg__rgba16__self_type, 
_swigt__p_agg__rgba8, 
_swigt__p_agg__pixel64_type, 
_swigt__p_agg__point_type, 
_swigt__p_agg__cover_type, 
_swigt__p_agg__renderer_scanline_aa_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 
_swigt__p_agg__scanline_pTunsigned_char_t, 
_swigt__p_agg__row_ptr_cacheTunsigned_char_t, 
_swigt__p_agg__conv_strokeTagg__conv_transformTagg__conv_curveTagg__path_storage_t_agg__trans_affine_t_t, 
_swigt__p_agg__conv_transformTagg__path_storage_agg__trans_affine_t, 
_swigt__p_agg__rect_baseTdouble_t, 
_swigt__p_agg__conv_strokeTagg__path_storage_t, 
_swigt__p_agg__conv_curveTagg__path_storage_t, 
_swigt__p_agg__trans_affine_scaling, 
_swigt__p_agg__filling_rule_e, 
_swigt__p_agg__binary_data, 
_swigt__p_char, 
_swigt__p_agg__rgba, 
_swigt__p_agg__rendering_buffer__row_data, 
_swigt__p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__conv_transformTagg__path_storage_agg__trans_affine_t_t_agg__vcgen_stroke_agg__null_markers_t, 
_swigt__p_agg__scanline32_bin, 
_swigt__p_agg__renderer_scanline_bin_solidTagg__renderer_baseTagg__pixel_formats_rgbaTagg__blender_rgbaTagg__rgba8_agg__order_rgba_t_unsigned_int_t_t_t, 
_swigt__p_agg__conv_adaptor_vcgenTagg__conv_curveTagg__path_storage_t_agg__vcgen_stroke_agg__null_markers_t, 
_swigt__p_span, 
_swigt__p_agg__order_bgra, 
_swigt__p_agg__rendering_buffer__span_data, 
_swigt__p_agg__trans_affine_skewing, 
_swigt__p_agg__order_bgr, 
_swigt__p_agg__int16u, 
_swigt__p_unsigned_char, 
_swigt__p_agg__conv_strokeTagg__conv_curveTagg__path_storage_t_t, 
_swigt__p_agg__order_rgba, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"cover_shift", SWIG_From_int((int)agg::cover_shift));
    PyDict_SetItemString(d,"cover_size", SWIG_From_int((int)agg::cover_size));
    PyDict_SetItemString(d,"cover_mask", SWIG_From_int((int)agg::cover_mask));
    PyDict_SetItemString(d,"cover_none", SWIG_From_int((int)agg::cover_none));
    PyDict_SetItemString(d,"cover_full", SWIG_From_int((int)agg::cover_full));
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"pi",_wrap_pi_get, _wrap_pi_set);
    PyDict_SetItemString(d,"path_cmd_stop", SWIG_From_int((int)agg::path_cmd_stop));
    PyDict_SetItemString(d,"path_cmd_move_to", SWIG_From_int((int)agg::path_cmd_move_to));
    PyDict_SetItemString(d,"path_cmd_line_to", SWIG_From_int((int)agg::path_cmd_line_to));
    PyDict_SetItemString(d,"path_cmd_curve3", SWIG_From_int((int)agg::path_cmd_curve3));
    PyDict_SetItemString(d,"path_cmd_curve4", SWIG_From_int((int)agg::path_cmd_curve4));
    PyDict_SetItemString(d,"path_cmd_curveN", SWIG_From_int((int)agg::path_cmd_curveN));
    PyDict_SetItemString(d,"path_cmd_catrom", SWIG_From_int((int)agg::path_cmd_catrom));
    PyDict_SetItemString(d,"path_cmd_ubspline", SWIG_From_int((int)agg::path_cmd_ubspline));
    PyDict_SetItemString(d,"path_cmd_end_poly", SWIG_From_int((int)agg::path_cmd_end_poly));
    PyDict_SetItemString(d,"path_cmd_mask", SWIG_From_int((int)agg::path_cmd_mask));
    PyDict_SetItemString(d,"path_flags_none", SWIG_From_int((int)agg::path_flags_none));
    PyDict_SetItemString(d,"path_flags_ccw", SWIG_From_int((int)agg::path_flags_ccw));
    PyDict_SetItemString(d,"path_flags_cw", SWIG_From_int((int)agg::path_flags_cw));
    PyDict_SetItemString(d,"path_flags_close", SWIG_From_int((int)agg::path_flags_close));
    PyDict_SetItemString(d,"path_flags_mask", SWIG_From_int((int)agg::path_flags_mask));
    PyDict_SetItemString(d,"order_rgb_R", SWIG_From_int((int)agg::order_rgb::R));
    PyDict_SetItemString(d,"order_rgb_G", SWIG_From_int((int)agg::order_rgb::G));
    PyDict_SetItemString(d,"order_rgb_B", SWIG_From_int((int)agg::order_rgb::B));
    PyDict_SetItemString(d,"order_rgb_rgb_tag", SWIG_From_int((int)agg::order_rgb::rgb_tag));
    PyDict_SetItemString(d,"order_bgr_B", SWIG_From_int((int)agg::order_bgr::B));
    PyDict_SetItemString(d,"order_bgr_G", SWIG_From_int((int)agg::order_bgr::G));
    PyDict_SetItemString(d,"order_bgr_R", SWIG_From_int((int)agg::order_bgr::R));
    PyDict_SetItemString(d,"order_bgr_rgb_tag", SWIG_From_int((int)agg::order_bgr::rgb_tag));
    PyDict_SetItemString(d,"order_rgba_R", SWIG_From_int((int)agg::order_rgba::R));
    PyDict_SetItemString(d,"order_rgba_G", SWIG_From_int((int)agg::order_rgba::G));
    PyDict_SetItemString(d,"order_rgba_B", SWIG_From_int((int)agg::order_rgba::B));
    PyDict_SetItemString(d,"order_rgba_A", SWIG_From_int((int)agg::order_rgba::A));
    PyDict_SetItemString(d,"order_rgba_rgba_tag", SWIG_From_int((int)agg::order_rgba::rgba_tag));
    PyDict_SetItemString(d,"order_argb_A", SWIG_From_int((int)agg::order_argb::A));
    PyDict_SetItemString(d,"order_argb_R", SWIG_From_int((int)agg::order_argb::R));
    PyDict_SetItemString(d,"order_argb_G", SWIG_From_int((int)agg::order_argb::G));
    PyDict_SetItemString(d,"order_argb_B", SWIG_From_int((int)agg::order_argb::B));
    PyDict_SetItemString(d,"order_argb_rgba_tag", SWIG_From_int((int)agg::order_argb::rgba_tag));
    PyDict_SetItemString(d,"order_abgr_A", SWIG_From_int((int)agg::order_abgr::A));
    PyDict_SetItemString(d,"order_abgr_B", SWIG_From_int((int)agg::order_abgr::B));
    PyDict_SetItemString(d,"order_abgr_G", SWIG_From_int((int)agg::order_abgr::G));
    PyDict_SetItemString(d,"order_abgr_R", SWIG_From_int((int)agg::order_abgr::R));
    PyDict_SetItemString(d,"order_abgr_rgba_tag", SWIG_From_int((int)agg::order_abgr::rgba_tag));
    PyDict_SetItemString(d,"order_bgra_B", SWIG_From_int((int)agg::order_bgra::B));
    PyDict_SetItemString(d,"order_bgra_G", SWIG_From_int((int)agg::order_bgra::G));
    PyDict_SetItemString(d,"order_bgra_R", SWIG_From_int((int)agg::order_bgra::R));
    PyDict_SetItemString(d,"order_bgra_A", SWIG_From_int((int)agg::order_bgra::A));
    PyDict_SetItemString(d,"order_bgra_rgba_tag", SWIG_From_int((int)agg::order_bgra::rgba_tag));
    PyDict_SetItemString(d,"rgba8_base_shift", SWIG_From_int((int)agg::rgba8::base_shift));
    PyDict_SetItemString(d,"rgba8_base_size", SWIG_From_int((int)agg::rgba8::base_size));
    PyDict_SetItemString(d,"rgba8_base_mask", SWIG_From_int((int)agg::rgba8::base_mask));
    PyDict_SetItemString(d,"rgba16_base_shift", SWIG_From_int((int)agg::rgba16::base_shift));
    PyDict_SetItemString(d,"rgba16_base_size", SWIG_From_int((int)agg::rgba16::base_size));
    PyDict_SetItemString(d,"rgba16_base_mask", SWIG_From_int((int)agg::rgba16::base_mask));
    PyDict_SetItemString(d,"butt_cap", SWIG_From_int((int)agg::butt_cap));
    PyDict_SetItemString(d,"square_cap", SWIG_From_int((int)agg::square_cap));
    PyDict_SetItemString(d,"round_cap", SWIG_From_int((int)agg::round_cap));
    PyDict_SetItemString(d,"miter_join", SWIG_From_int((int)agg::miter_join));
    PyDict_SetItemString(d,"miter_join_revert", SWIG_From_int((int)agg::miter_join_revert));
    PyDict_SetItemString(d,"round_join", SWIG_From_int((int)agg::round_join));
    PyDict_SetItemString(d,"bevel_join", SWIG_From_int((int)agg::bevel_join));
    SWIG_addvarlink(SWIG_globals,(char*)"stroke_theta",_wrap_stroke_theta_get, _wrap_stroke_theta_set);
    PyDict_SetItemString(d,"comp_op_clear", SWIG_From_int((int)agg::comp_op_clear));
    PyDict_SetItemString(d,"comp_op_src", SWIG_From_int((int)agg::comp_op_src));
    PyDict_SetItemString(d,"comp_op_dst", SWIG_From_int((int)agg::comp_op_dst));
    PyDict_SetItemString(d,"comp_op_src_over", SWIG_From_int((int)agg::comp_op_src_over));
    PyDict_SetItemString(d,"comp_op_dst_over", SWIG_From_int((int)agg::comp_op_dst_over));
    PyDict_SetItemString(d,"comp_op_src_in", SWIG_From_int((int)agg::comp_op_src_in));
    PyDict_SetItemString(d,"comp_op_dst_in", SWIG_From_int((int)agg::comp_op_dst_in));
    PyDict_SetItemString(d,"comp_op_src_out", SWIG_From_int((int)agg::comp_op_src_out));
    PyDict_SetItemString(d,"comp_op_dst_out", SWIG_From_int((int)agg::comp_op_dst_out));
    PyDict_SetItemString(d,"comp_op_src_atop", SWIG_From_int((int)agg::comp_op_src_atop));
    PyDict_SetItemString(d,"comp_op_dst_atop", SWIG_From_int((int)agg::comp_op_dst_atop));
    PyDict_SetItemString(d,"comp_op_xor", SWIG_From_int((int)agg::comp_op_xor));
    PyDict_SetItemString(d,"comp_op_plus", SWIG_From_int((int)agg::comp_op_plus));
    PyDict_SetItemString(d,"comp_op_minus", SWIG_From_int((int)agg::comp_op_minus));
    PyDict_SetItemString(d,"comp_op_multiply", SWIG_From_int((int)agg::comp_op_multiply));
    PyDict_SetItemString(d,"comp_op_screen", SWIG_From_int((int)agg::comp_op_screen));
    PyDict_SetItemString(d,"comp_op_overlay", SWIG_From_int((int)agg::comp_op_overlay));
    PyDict_SetItemString(d,"comp_op_darken", SWIG_From_int((int)agg::comp_op_darken));
    PyDict_SetItemString(d,"comp_op_lighten", SWIG_From_int((int)agg::comp_op_lighten));
    PyDict_SetItemString(d,"comp_op_color_dodge", SWIG_From_int((int)agg::comp_op_color_dodge));
    PyDict_SetItemString(d,"comp_op_color_burn", SWIG_From_int((int)agg::comp_op_color_burn));
    PyDict_SetItemString(d,"comp_op_hard_light", SWIG_From_int((int)agg::comp_op_hard_light));
    PyDict_SetItemString(d,"comp_op_soft_light", SWIG_From_int((int)agg::comp_op_soft_light));
    PyDict_SetItemString(d,"comp_op_difference", SWIG_From_int((int)agg::comp_op_difference));
    PyDict_SetItemString(d,"comp_op_exclusion", SWIG_From_int((int)agg::comp_op_exclusion));
    PyDict_SetItemString(d,"comp_op_contrast", SWIG_From_int((int)agg::comp_op_contrast));
    PyDict_SetItemString(d,"end_of_comp_op_e", SWIG_From_int((int)agg::end_of_comp_op_e));
    PyDict_SetItemString(d,"pixel_format_rgba_base_shift", SWIG_From_int((int)agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type >::base_shift));
    PyDict_SetItemString(d,"pixel_format_rgba_base_size", SWIG_From_int((int)agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type >::base_size));
    PyDict_SetItemString(d,"pixel_format_rgba_base_mask", SWIG_From_int((int)agg::pixel_formats_rgba<agg::blender_rgba32,agg::pixel32_type >::base_mask));
}

