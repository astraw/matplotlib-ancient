/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/* attritbute passed for some compilers to avoid unused method warnings */
#ifndef SWIGUNUSED
#ifdef __GNUC__
#define SWIGUNUSED __attribute__ ((unused)) 
#else
#define SWIGUNUSED 
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
#define SWIGRUNTIME static SWIGUNUSED
#endif

#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif


#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  int                      size;		/* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty) \
  do { \
    swig_cast_info *iter; \
    if (!ty) return 0; \
    iter = ty->cast; \
    while (iter) { \
      if (comparison) { \
        if (iter == ty->cast) return iter; \
\
        /* Move iter to the top of the linked list */ \
        iter->prev->next = iter->next; \
        if (iter->next) \
          iter->next->prev = iter->prev; \
        iter->next = ty->cast; \
        iter->prev = 0; \
        if (ty->cast) ty->cast->prev = iter; \
        ty->cast = iter; \
\
        return iter; \
      } \
      iter = iter->next; \
    } \
    return 0; \
  } while(0)

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast;
  
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  cast = ti->cast;
  while (cast) {
    if (!cast->converter)
      SWIG_TypeClientData(cast->type, clientdata);
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter;
  int l, r, i, compare;

  iter = start;
  do {
    l = 0;
    r = iter->size - 1;
    while (l <= r) {
      i = (l + r) / 2;

      if (!(iter->types[i]->name)) break; /* should never happen */

      compare = strcmp(name, iter->types[i]->name);
      if (compare == 0)
        return iter->types[i];
      else if (compare < 0)
        r = i - 1;
      else if (compare > 0)
        l = i + 1;
    }
    iter = iter->next;
  } while (iter != end);

  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  swig_module_info *iter;
  swig_type_info *ret;
  int i;

  /* STEP 1: Search the name field using binary search */
  ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) return ret;

  /* STEP 2: If the type hasn't been found, do a complete search
             of the str field (the human readable name) */
  iter = start;
  do {
    for (i = 0; i < iter->size; ++i) {
      if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
        return iter->types[i];
    }
    iter = iter->next;
  } while (iter != end);
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNSHORT
#  define SWIGINTERNSHORT SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

static void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
} 


#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_agg__path_storage swig_types[0]
#define SWIGTYPE_p_agg__point_type swig_types[1]
#define SWIGTYPE_p_agg__rect_baseTdouble_t swig_types[2]
#define SWIGTYPE_p_agg__rect_baseTint_t swig_types[3]
#define SWIGTYPE_p_agg__trans_affine swig_types[4]
#define SWIGTYPE_p_agg__trans_affine_rotation swig_types[5]
#define SWIGTYPE_p_agg__trans_affine_scaling swig_types[6]
#define SWIGTYPE_p_agg__trans_affine_skewing swig_types[7]
#define SWIGTYPE_p_agg__trans_affine_translation swig_types[8]
#define SWIGTYPE_p_agg__vertex_type swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_double swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_self_type swig_types[13]
#define SWIGTYPE_p_short swig_types[14]
#define SWIGTYPE_p_signed_char swig_types[15]
#define SWIGTYPE_p_unsigned_char swig_types[16]
#define SWIGTYPE_p_unsigned_int swig_types[17]
#define SWIGTYPE_p_unsigned_short swig_types[18]
#define SWIGTYPE_ptrdiff_t swig_types[19]
#define SWIGTYPE_size_t swig_types[20]
#define SWIGTYPE_std__ptrdiff_t swig_types[21]
#define SWIGTYPE_std__size_t swig_types[22]
static swig_type_info *swig_types[23];
static swig_module_info swig_module = {swig_types, 23, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _agg.so
  ------------------------------------------------*/
#define SWIG_init    init_agg

#define SWIG_name    "_agg"

#include "agg_basics.h"
#include "agg_trans_affine.h"
#include "agg_path_storage.h"  
  
using namespace agg;
  
  

  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNSHORT double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


#include <limits.h>


SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNSHORT unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGINTERNSHORT PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


SWIGINTERN PyObject*
t_output_helper(PyObject* target, PyObject* o) {
  if (!target) {
    target = o;
  } else if (target == Py_None) {  
    Py_DECREF(target);
    target = o;
  } else {
    if (!PyList_Check(target)) {
      PyObject *o2 = target;
      target = PyList_New(1);
      PyList_SetItem(target, 0, o2);
    }
    PyList_Append(target,o);
    }
  return target;
}



SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNSHORT bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_pi_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable pi is read-only.");
    return 1;
}


static PyObject *_wrap_pi_get(void) {
    PyObject *pyobj;
    
    {
        pyobj = SWIG_From_double((double)(agg::pi)); 
    }
    return pyobj;
}


static PyObject *_wrap_deg2rad(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:deg2rad",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (double)agg::deg2rad(arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rad2deg(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rad2deg",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (double)agg::rad2deg(arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_vertex",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_vertex(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_stop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_stop",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_stop(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_move_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_move_to",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_move_to(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_line_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_line_to",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_line_to(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_curve(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve3",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_curve3(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_curve4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_curve4",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_curve4(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_end_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_end_poly",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_end_poly(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_close(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_close",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_close(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_next_poly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_next_poly",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_next_poly(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_cw(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_cw",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_cw(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_ccw(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_ccw",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_ccw(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_oriented(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_oriented",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_oriented(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_closed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_closed",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)agg::is_closed(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_get_close_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get_close_flag",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)agg::get_close_flag(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clear_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clear_orientation",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)agg::clear_orientation(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_get_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get_orientation",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)agg::get_orientation(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set_orientation",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned int)agg::set_orientation(arg1,arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:point_type_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__point_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:point_type_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__point_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:point_type_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__point_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_point_type_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:point_type_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__point_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_point_type")) goto fail;
    result = (agg::point_type *)new agg::point_type();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__point_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::point_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_point_type",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (agg::point_type *)new agg::point_type(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__point_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_point_type(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_point_type__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_point_type__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_point_type'");
    return NULL;
}


static PyObject *_wrap_delete_point_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::point_type *arg1 = (agg::point_type *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_point_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__point_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * point_type_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__point_type, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_vertex_type_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_cmd_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vertex_type_cmd_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cmd = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vertex_type_cmd_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vertex_type_cmd_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->cmd);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vertex_type")) goto fail;
    result = (agg::vertex_type *)new agg::vertex_type();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vertex_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    unsigned int arg3 ;
    agg::vertex_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_vertex_type",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (agg::vertex_type *)new agg::vertex_type(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__vertex_type, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vertex_type(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vertex_type__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_new_vertex_type__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vertex_type'");
    return NULL;
}


static PyObject *_wrap_delete_vertex_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::vertex_type *arg1 = (agg::vertex_type *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vertex_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__vertex_type, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vertex_type_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__vertex_type, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rect_x1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_x1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_x1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->x1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_y1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_y1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->y1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_x2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_x2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_x2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->x2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_y2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_y2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_y2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->y2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rect")) goto fail;
    result = (agg::rect_base<int > *)new agg::rect_base<int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    agg::rect_base<int > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_rect",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (agg::rect_base<int > *)new agg::rect_base<int >(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rect__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_rect__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_rect'");
    return NULL;
}


static PyObject *_wrap_rect_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    agg::rect_base<int >::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_normalize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::rect_base<int >::self_type const &_result_ref = (arg1)->normalize();
        result = (agg::rect_base<int >::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTint_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    agg::rect_base<int >::self_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_clip",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect_base<int >::self_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->clip((agg::rect_base<int > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_is_valid(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_is_valid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((agg::rect_base<int > const *)arg1)->is_valid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<int > *arg1 = (agg::rect_base<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rect",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rect_baseTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_rect_d_x1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_x1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_x1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_y1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_y1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_x2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_x2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_x2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_y2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_y2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_y2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_rect_d")) goto fail;
    result = (agg::rect_base<double > *)new agg::rect_base<double >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    agg::rect_base<double > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_rect_d",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (agg::rect_base<double > *)new agg::rect_base<double >(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_rect_d(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_rect_d__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_new_rect_d__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_rect_d'");
    return NULL;
}


static PyObject *_wrap_rect_d_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    agg::rect_base<double >::self_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_normalize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::rect_base<double >::self_type const &_result_ref = (arg1)->normalize();
        result = (agg::rect_base<double >::self_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__rect_baseTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_clip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    agg::rect_base<double >::self_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rect_d_clip",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect_base<double >::self_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->clip((agg::rect_base<double > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rect_d_is_valid(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rect_d_is_valid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((agg::rect_base<double > const *)arg1)->is_valid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_rect_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_base<double > *arg1 = (agg::rect_base<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_rect_d",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * rect_d_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__rect_baseTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_unite_rectangles(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect *arg1 = 0 ;
    agg::rect *arg2 = 0 ;
    agg::rect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:unite_rectangles",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("agg::rect");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = agg::SWIG_TEMPLATE_DISAMBIGUATOR unite_rectangles<rect >((agg::rect_base<int > const &)*arg1,(agg::rect_base<int > const &)*arg2);
    
    {
        agg::rect * resultptr;
        resultptr = new agg::rect((agg::rect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_unite_rectangles_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_d *arg1 = 0 ;
    agg::rect_d *arg2 = 0 ;
    agg::rect_d result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:unite_rectangles_d",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("agg::rect_d");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect_d");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = agg::SWIG_TEMPLATE_DISAMBIGUATOR unite_rectangles<rect_d >((agg::rect_base<double > const &)*arg1,(agg::rect_base<double > const &)*arg2);
    
    {
        agg::rect_d * resultptr;
        resultptr = new agg::rect_d((agg::rect_d &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_intersect_rectangles(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect *arg1 = 0 ;
    agg::rect *arg2 = 0 ;
    agg::rect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:intersect_rectangles",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("agg::rect");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = agg::SWIG_TEMPLATE_DISAMBIGUATOR intersect_rectangles<rect >((agg::rect_base<int > const &)*arg1,(agg::rect_base<int > const &)*arg2);
    
    {
        agg::rect * resultptr;
        resultptr = new agg::rect((agg::rect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_baseTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_intersect_rectangles_d(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::rect_d *arg1 = 0 ;
    agg::rect_d *arg2 = 0 ;
    agg::rect_d result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:intersect_rectangles_d",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("agg::rect_d");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__rect_baseTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::rect_d");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = agg::SWIG_TEMPLATE_DISAMBIGUATOR intersect_rectangles<rect_d >((agg::rect_base<double > const &)*arg1,(agg::rect_base<double > const &)*arg2);
    
    {
        agg::rect_d * resultptr;
        resultptr = new agg::rect_d((agg::rect_d &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__rect_baseTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_trans_affine")) goto fail;
    result = (agg::trans_affine *)new agg::trans_affine();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (agg::trans_affine *)new agg::trans_affine(arg1,arg2,arg3,arg4,arg5,arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    agg::trans_affine *result;
    double temp1[6] ;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine",&obj0,&obj1)) goto fail;
    {
        int i;
        if (!PySequence_Check(obj0)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj0) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj0,i);
            if (PyFloat_Check(o)) {
                temp1[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp1[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg1 = &temp1[0];
    }
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    result = (agg::trans_affine *)new agg::trans_affine((double const *)arg1,(double const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    agg::trans_affine *result;
    double temp5[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        int i;
        if (!PySequence_Check(obj4)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj4) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj4,i);
            if (PyFloat_Check(o)) {
                temp5[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp5[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg5 = &temp5[0];
    }
    result = (agg::trans_affine *)new agg::trans_affine(arg1,arg2,arg3,arg4,(double const *)arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    agg::trans_affine *result;
    double temp1[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_trans_affine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        int i;
        if (!PySequence_Check(obj0)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj0) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj0,i);
            if (PyFloat_Check(o)) {
                temp1[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp1[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg1 = &temp1[0];
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (agg::trans_affine *)new agg::trans_affine((double const *)arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_trans_affine__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            {
                _v = (argv[1] != 0);
            }
            if (_v) {
                return _wrap_new_trans_affine__SWIG_2(self,args);
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        {
                            _v = (argv[4] != 0);
                        }
                        if (_v) {
                            return _wrap_new_trans_affine__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_new_trans_affine__SWIG_4(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                return _wrap_new_trans_affine__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_trans_affine'");
    return NULL;
}


static PyObject *_wrap_trans_affine_parl_to_parl(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    agg::trans_affine *result;
    double temp2[6] ;
    double temp3[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_parl_to_parl",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    {
        int i;
        if (!PySequence_Check(obj2)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj2) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj2,i);
            if (PyFloat_Check(o)) {
                temp3[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp3[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg3 = &temp3[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->parl_to_parl((double const *)arg2,(double const *)arg3);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_rect_to_parl(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double *arg6 = (double *) 0 ;
    agg::trans_affine *result;
    double temp6[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:trans_affine_rect_to_parl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        int i;
        if (!PySequence_Check(obj5)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj5) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj5,i);
            if (PyFloat_Check(o)) {
                temp6[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp6[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg6 = &temp6[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->rect_to_parl(arg2,arg3,arg4,arg5,(double const *)arg6);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_parl_to_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    agg::trans_affine *result;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:trans_affine_parl_to_rect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->parl_to_rect((double const *)arg2,arg3,arg4,arg5,arg6);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_reset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->reset();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_multiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_multiply",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->multiply((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_premultiply(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_premultiply",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->premultiply((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_invert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_invert",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->invert();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_flip_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_flip_x",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->flip_x();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_flip_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_flip_y",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        agg::trans_affine const &_result_ref = (arg1)->flip_y();
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_as_vec6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = temp2;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_as_vec6",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((agg::trans_affine const *)arg1)->store_to(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        // Append output value arg2 to resultobj
        PyObject *ret = PyTuple_New(6);
        for (unsigned i=0; i<6; i++)
        PyTuple_SetItem(ret,i,PyFloat_FromDouble(arg2[i]));
        resultobj = ret;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_load_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    agg::trans_affine *result;
    double temp2[6] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_load_from",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int i;
        if (!PySequence_Check(obj1)) {
            PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
            return NULL;
        }
        if (PyObject_Length(obj1) != 6) {
            PyErr_SetString(PyExc_ValueError,"Expecting a sequence with 6 elements");
            return NULL;
        }
        for (i=0; i < 6; i++) {
            PyObject *o = PySequence_GetItem(obj1,i);
            if (PyFloat_Check(o)) {
                temp2[i] = PyFloat_AsDouble(o);
            }  
            else {
                PyObject* converted = PyNumber_Float(o);
                if (!converted) {
                    PyErr_SetString(PyExc_TypeError,"Expecting a sequence of floats");
                    return NULL;
                }
                temp2[i] = PyFloat_AsDouble(converted);  
                Py_DECREF(converted);
            }
        }
        arg2 = &temp2[0];
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->load_from((double const *)arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        agg::trans_affine const &_result_ref = (arg1)->operator *=((agg::trans_affine const &)*arg2);
        result = (agg::trans_affine *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___mul__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    agg::trans_affine result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->operator *((agg::trans_affine const &)*arg2);
    
    {
        agg::trans_affine * resultptr;
        resultptr = new agg::trans_affine((agg::trans_affine &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__trans_affine, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___invert__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine___invert__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((agg::trans_affine const *)arg1)->operator ~();
    
    {
        agg::trans_affine * resultptr;
        resultptr = new agg::trans_affine((agg::trans_affine &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_agg__trans_affine, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->operator ==((agg::trans_affine const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->operator !=((agg::trans_affine const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_transform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_transform",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!(SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,0) != -1)) {
            temp2 = SWIG_As_double(obj1);
            if (SWIG_arg_fail(2)) SWIG_fail;
            arg2 = &temp2;
            res2 = SWIG_NEWOBJ;
        }
    }
    {
        if (!(SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,0) != -1)) {
            temp3 = SWIG_As_double(obj2);
            if (SWIG_arg_fail(3)) SWIG_fail;
            arg3 = &temp3;
            res3 = SWIG_NEWOBJ;
        }
    }
    ((agg::trans_affine const *)arg1)->transform(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_inverse_transform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_inverse_transform",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (!(SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_double,0) != -1)) {
            temp2 = SWIG_As_double(obj1);
            if (SWIG_arg_fail(2)) SWIG_fail;
            arg2 = &temp2;
            res2 = SWIG_NEWOBJ;
        }
    }
    {
        if (!(SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_double,0) != -1)) {
            temp3 = SWIG_As_double(obj2);
            if (SWIG_arg_fail(3)) SWIG_fail;
            arg3 = &temp3;
            res3 = SWIG_NEWOBJ;
        }
    }
    ((agg::trans_affine const *)arg1)->inverse_transform(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_determinant(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_determinant",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->determinant();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_scale(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_scale",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->scale();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_identity__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_is_identity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->is_identity(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_identity__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_is_identity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((agg::trans_affine const *)arg1)->is_identity();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_identity(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_trans_affine_is_identity__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_trans_affine_is_identity__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'trans_affine_is_identity'");
    return NULL;
}


static PyObject *_wrap_trans_affine_is_equal__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    double arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:trans_affine_is_equal",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->is_equal((agg::trans_affine const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_equal__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    agg::trans_affine *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:trans_affine_is_equal",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::trans_affine");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((agg::trans_affine const *)arg1)->is_equal((agg::trans_affine const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_is_equal(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_trans_affine_is_equal__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_agg__trans_affine, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_trans_affine_is_equal__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'trans_affine_is_equal'");
    return NULL;
}


static PyObject *_wrap_trans_affine_get_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_rotation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((agg::trans_affine const *)arg1)->rotation();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_get_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_translation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((agg::trans_affine const *)arg1)->translation(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trans_affine_get_scaling(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp2 ;
    int res2 = 0 ;
    double temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:trans_affine_get_scaling",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((agg::trans_affine const *)arg1)->scaling(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_double((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine *arg1 = (agg::trans_affine *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    agg::trans_affine_rotation *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_trans_affine_rotation",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (agg::trans_affine_rotation *)new agg::trans_affine_rotation(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_rotation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_rotation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_rotation *arg1 = (agg::trans_affine_rotation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_rotation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine_rotation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_rotation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_rotation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_scaling__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_scaling *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_scaling",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (agg::trans_affine_scaling *)new agg::trans_affine_scaling(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_scaling, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine_scaling__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    agg::trans_affine_scaling *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_trans_affine_scaling",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (agg::trans_affine_scaling *)new agg::trans_affine_scaling(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_scaling, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_trans_affine_scaling(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_trans_affine_scaling__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_trans_affine_scaling__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_trans_affine_scaling'");
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_scaling(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_scaling *arg1 = (agg::trans_affine_scaling *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_scaling",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine_scaling, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_scaling_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_scaling, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_translation *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_translation",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (agg::trans_affine_translation *)new agg::trans_affine_translation(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_translation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_translation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_translation *arg1 = (agg::trans_affine_translation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_translation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine_translation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_translation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_translation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_trans_affine_skewing(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    agg::trans_affine_skewing *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_trans_affine_skewing",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (agg::trans_affine_skewing *)new agg::trans_affine_skewing(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__trans_affine_skewing, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_trans_affine_skewing(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::trans_affine_skewing *arg1 = (agg::trans_affine_skewing *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_trans_affine_skewing",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__trans_affine_skewing, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * trans_affine_skewing_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__trans_affine_skewing, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_path_storage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_path_storage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_path_storage")) goto fail;
    result = (agg::path_storage *)new agg::path_storage();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__path_storage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = 0 ;
    agg::path_storage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_path_storage",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("agg::path_storage");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (agg::path_storage *)new agg::path_storage((agg::path_storage const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_agg__path_storage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_path_storage(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_path_storage__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_path_storage__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_path_storage'");
    return NULL;
}


static PyObject *_wrap_path_storage_remove_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_remove_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->remove_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_last_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_last_vertex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->last_vertex(arg2,arg3);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_prev_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_prev_vertex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->prev_vertex(arg2,arg3);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_rel_to_abs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_rel_to_abs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((agg::path_storage const *)arg1)->rel_to_abs(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_move_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_move_to",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->move_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_move_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_move_rel",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->move_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_line_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_line_to",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->line_to(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_line_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_line_rel",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->line_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arc_to(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    bool arg6 ;
    double arg7 ;
    double arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:path_storage_arc_to",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (bool)(SWIG_As_bool(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (bool)(SWIG_As_bool(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    (arg1)->arc_to(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arc_rel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    bool arg6 ;
    double arg7 ;
    double arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:path_storage_arc_rel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (bool)(SWIG_As_bool(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (bool)(SWIG_As_bool(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    (arg1)->arc_rel(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve3",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->curve3(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve3_rel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->curve3_rel(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_curve3",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->curve3(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_path_storage_curve3__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve3__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_curve3'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_curve3_rel",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->curve3_rel(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve3_rel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_path_storage_curve3_rel__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve3_rel__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_curve3_rel'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve4__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:path_storage_curve4",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    (arg1)->curve4(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:path_storage_curve4_rel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    (arg1)->curve4_rel(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve4",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->curve4(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve4__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    return _wrap_path_storage_curve4__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_curve4'");
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_curve4_rel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->curve4_rel(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_curve4_rel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_curve4_rel__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    return _wrap_path_storage_curve4_rel__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_curve4_rel'");
    return NULL;
}


static PyObject *_wrap_path_storage_end_poly__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_end_poly",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->end_poly(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_end_poly__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_end_poly",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->end_poly();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_end_poly(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_path_storage_end_poly__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_path_storage_end_poly__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_end_poly'");
    return NULL;
}


static PyObject *_wrap_path_storage_close_polygon__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_close_polygon",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->close_polygon(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_close_polygon__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_close_polygon",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->close_polygon();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_close_polygon(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_path_storage_close_polygon__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_path_storage_close_polygon__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_close_polygon'");
    return NULL;
}


static PyObject *_wrap_path_storage_add_poly__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    unsigned int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:path_storage_add_poly",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (unsigned int)(SWIG_As_unsigned_SS_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->add_poly((double const *)arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_poly__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:path_storage_add_poly",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->add_poly((double const *)arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_poly__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_add_poly",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->add_poly((double const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_poly(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_path_storage_add_poly__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_path_storage_add_poly__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_unsigned_SS_int(argv[4]);
                        if (_v) {
                            return _wrap_path_storage_add_poly__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_add_poly'");
    return NULL;
}


static PyObject *_wrap_path_storage_add_vertices(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_add_vertices",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->add_vertices((double const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_start_new_path(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_start_new_path",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->start_new_path();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_copy_from(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    agg::path_storage *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_copy_from",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("agg::path_storage");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->copy_from((agg::path_storage const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_total_vertices(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_total_vertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((agg::path_storage const *)arg1)->total_vertices();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    unsigned int result;
    double temp13 ;
    double temp23 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    {
        temp13 = 0; arg3 = &temp13;
        temp23 = 0; arg4 = &temp23;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned int)((agg::path_storage const *)arg1)->vertex(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    {
        PyObject *px = PyFloat_FromDouble(*arg3);
        PyObject *py = PyFloat_FromDouble(*arg4);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_command(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_command",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned int)((agg::path_storage const *)arg1)->command(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_rewind(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_rewind",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->rewind(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    unsigned int result;
    double temp12 ;
    double temp22 ;
    PyObject * obj0 = 0 ;
    
    {
        temp12 = 0; arg2 = &temp12;
        temp22 = 0; arg3 = &temp22;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:path_storage_vertex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->vertex(arg2,arg3);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    {
        PyObject *px = PyFloat_FromDouble(*arg2);
        PyObject *py = PyFloat_FromDouble(*arg3);
        PyObject *return_val = PyTuple_New(3);
        PyTuple_SetItem(return_val,0,resultobj);
        // result is what was returned from vertex
        PyTuple_SetItem(return_val,1,px);
        PyTuple_SetItem(return_val,2,py);
        //Py_DECREF(resultobj);
        resultobj = return_val;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_vertex(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_path_storage_vertex__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_agg__path_storage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_path_storage_vertex__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'path_storage_vertex'");
    return NULL;
}


static PyObject *_wrap_path_storage_arrange_orientations(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    agg::path_flags_e arg3 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_arrange_orientations",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (agg::path_flags_e)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (unsigned int)(arg1)->arrange_orientations(arg2,(agg::path_flags_e )arg3);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_arrange_orientations_all_paths(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    agg::path_flags_e arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:path_storage_arrange_orientations_all_paths",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (agg::path_flags_e)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->arrange_orientations_all_paths((agg::path_flags_e )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_flip_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_flip_x",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->flip_x(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_flip_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_flip_y",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->flip_y(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_add_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    double arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:path_storage_add_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->add_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_modify_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:path_storage_modify_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->modify_vertex(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_path_storage_modify_command(PyObject *, PyObject *args) {
    PyObject *resultobj;
    agg::path_storage *arg1 = (agg::path_storage *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:path_storage_modify_command",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_agg__path_storage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->modify_command(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * path_storage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_agg__path_storage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"deg2rad", _wrap_deg2rad, METH_VARARGS, NULL},
	 { (char *)"rad2deg", _wrap_rad2deg, METH_VARARGS, NULL},
	 { (char *)"is_vertex", _wrap_is_vertex, METH_VARARGS, NULL},
	 { (char *)"is_stop", _wrap_is_stop, METH_VARARGS, NULL},
	 { (char *)"is_move_to", _wrap_is_move_to, METH_VARARGS, NULL},
	 { (char *)"is_line_to", _wrap_is_line_to, METH_VARARGS, NULL},
	 { (char *)"is_curve", _wrap_is_curve, METH_VARARGS, NULL},
	 { (char *)"is_curve3", _wrap_is_curve3, METH_VARARGS, NULL},
	 { (char *)"is_curve4", _wrap_is_curve4, METH_VARARGS, NULL},
	 { (char *)"is_end_poly", _wrap_is_end_poly, METH_VARARGS, NULL},
	 { (char *)"is_close", _wrap_is_close, METH_VARARGS, NULL},
	 { (char *)"is_next_poly", _wrap_is_next_poly, METH_VARARGS, NULL},
	 { (char *)"is_cw", _wrap_is_cw, METH_VARARGS, NULL},
	 { (char *)"is_ccw", _wrap_is_ccw, METH_VARARGS, NULL},
	 { (char *)"is_oriented", _wrap_is_oriented, METH_VARARGS, NULL},
	 { (char *)"is_closed", _wrap_is_closed, METH_VARARGS, NULL},
	 { (char *)"get_close_flag", _wrap_get_close_flag, METH_VARARGS, NULL},
	 { (char *)"clear_orientation", _wrap_clear_orientation, METH_VARARGS, NULL},
	 { (char *)"get_orientation", _wrap_get_orientation, METH_VARARGS, NULL},
	 { (char *)"set_orientation", _wrap_set_orientation, METH_VARARGS, NULL},
	 { (char *)"point_type_x_set", _wrap_point_type_x_set, METH_VARARGS, NULL},
	 { (char *)"point_type_x_get", _wrap_point_type_x_get, METH_VARARGS, NULL},
	 { (char *)"point_type_y_set", _wrap_point_type_y_set, METH_VARARGS, NULL},
	 { (char *)"point_type_y_get", _wrap_point_type_y_get, METH_VARARGS, NULL},
	 { (char *)"new_point_type", _wrap_new_point_type, METH_VARARGS, NULL},
	 { (char *)"delete_point_type", _wrap_delete_point_type, METH_VARARGS, NULL},
	 { (char *)"point_type_swigregister", point_type_swigregister, METH_VARARGS, NULL},
	 { (char *)"vertex_type_x_set", _wrap_vertex_type_x_set, METH_VARARGS, NULL},
	 { (char *)"vertex_type_x_get", _wrap_vertex_type_x_get, METH_VARARGS, NULL},
	 { (char *)"vertex_type_y_set", _wrap_vertex_type_y_set, METH_VARARGS, NULL},
	 { (char *)"vertex_type_y_get", _wrap_vertex_type_y_get, METH_VARARGS, NULL},
	 { (char *)"vertex_type_cmd_set", _wrap_vertex_type_cmd_set, METH_VARARGS, NULL},
	 { (char *)"vertex_type_cmd_get", _wrap_vertex_type_cmd_get, METH_VARARGS, NULL},
	 { (char *)"new_vertex_type", _wrap_new_vertex_type, METH_VARARGS, NULL},
	 { (char *)"delete_vertex_type", _wrap_delete_vertex_type, METH_VARARGS, NULL},
	 { (char *)"vertex_type_swigregister", vertex_type_swigregister, METH_VARARGS, NULL},
	 { (char *)"rect_x1_set", _wrap_rect_x1_set, METH_VARARGS, NULL},
	 { (char *)"rect_x1_get", _wrap_rect_x1_get, METH_VARARGS, NULL},
	 { (char *)"rect_y1_set", _wrap_rect_y1_set, METH_VARARGS, NULL},
	 { (char *)"rect_y1_get", _wrap_rect_y1_get, METH_VARARGS, NULL},
	 { (char *)"rect_x2_set", _wrap_rect_x2_set, METH_VARARGS, NULL},
	 { (char *)"rect_x2_get", _wrap_rect_x2_get, METH_VARARGS, NULL},
	 { (char *)"rect_y2_set", _wrap_rect_y2_set, METH_VARARGS, NULL},
	 { (char *)"rect_y2_get", _wrap_rect_y2_get, METH_VARARGS, NULL},
	 { (char *)"new_rect", _wrap_new_rect, METH_VARARGS, NULL},
	 { (char *)"rect_normalize", _wrap_rect_normalize, METH_VARARGS, NULL},
	 { (char *)"rect_clip", _wrap_rect_clip, METH_VARARGS, NULL},
	 { (char *)"rect_is_valid", _wrap_rect_is_valid, METH_VARARGS, NULL},
	 { (char *)"delete_rect", _wrap_delete_rect, METH_VARARGS, NULL},
	 { (char *)"rect_swigregister", rect_swigregister, METH_VARARGS, NULL},
	 { (char *)"rect_d_x1_set", _wrap_rect_d_x1_set, METH_VARARGS, NULL},
	 { (char *)"rect_d_x1_get", _wrap_rect_d_x1_get, METH_VARARGS, NULL},
	 { (char *)"rect_d_y1_set", _wrap_rect_d_y1_set, METH_VARARGS, NULL},
	 { (char *)"rect_d_y1_get", _wrap_rect_d_y1_get, METH_VARARGS, NULL},
	 { (char *)"rect_d_x2_set", _wrap_rect_d_x2_set, METH_VARARGS, NULL},
	 { (char *)"rect_d_x2_get", _wrap_rect_d_x2_get, METH_VARARGS, NULL},
	 { (char *)"rect_d_y2_set", _wrap_rect_d_y2_set, METH_VARARGS, NULL},
	 { (char *)"rect_d_y2_get", _wrap_rect_d_y2_get, METH_VARARGS, NULL},
	 { (char *)"new_rect_d", _wrap_new_rect_d, METH_VARARGS, NULL},
	 { (char *)"rect_d_normalize", _wrap_rect_d_normalize, METH_VARARGS, NULL},
	 { (char *)"rect_d_clip", _wrap_rect_d_clip, METH_VARARGS, NULL},
	 { (char *)"rect_d_is_valid", _wrap_rect_d_is_valid, METH_VARARGS, NULL},
	 { (char *)"delete_rect_d", _wrap_delete_rect_d, METH_VARARGS, NULL},
	 { (char *)"rect_d_swigregister", rect_d_swigregister, METH_VARARGS, NULL},
	 { (char *)"unite_rectangles", _wrap_unite_rectangles, METH_VARARGS, NULL},
	 { (char *)"unite_rectangles_d", _wrap_unite_rectangles_d, METH_VARARGS, NULL},
	 { (char *)"intersect_rectangles", _wrap_intersect_rectangles, METH_VARARGS, NULL},
	 { (char *)"intersect_rectangles_d", _wrap_intersect_rectangles_d, METH_VARARGS, NULL},
	 { (char *)"new_trans_affine", _wrap_new_trans_affine, METH_VARARGS, NULL},
	 { (char *)"trans_affine_parl_to_parl", _wrap_trans_affine_parl_to_parl, METH_VARARGS, NULL},
	 { (char *)"trans_affine_rect_to_parl", _wrap_trans_affine_rect_to_parl, METH_VARARGS, NULL},
	 { (char *)"trans_affine_parl_to_rect", _wrap_trans_affine_parl_to_rect, METH_VARARGS, NULL},
	 { (char *)"trans_affine_reset", _wrap_trans_affine_reset, METH_VARARGS, NULL},
	 { (char *)"trans_affine_multiply", _wrap_trans_affine_multiply, METH_VARARGS, NULL},
	 { (char *)"trans_affine_premultiply", _wrap_trans_affine_premultiply, METH_VARARGS, NULL},
	 { (char *)"trans_affine_invert", _wrap_trans_affine_invert, METH_VARARGS, NULL},
	 { (char *)"trans_affine_flip_x", _wrap_trans_affine_flip_x, METH_VARARGS, NULL},
	 { (char *)"trans_affine_flip_y", _wrap_trans_affine_flip_y, METH_VARARGS, NULL},
	 { (char *)"trans_affine_as_vec6", _wrap_trans_affine_as_vec6, METH_VARARGS, NULL},
	 { (char *)"trans_affine_load_from", _wrap_trans_affine_load_from, METH_VARARGS, NULL},
	 { (char *)"trans_affine___imul__", _wrap_trans_affine___imul__, METH_VARARGS, NULL},
	 { (char *)"trans_affine___mul__", _wrap_trans_affine___mul__, METH_VARARGS, NULL},
	 { (char *)"trans_affine___invert__", _wrap_trans_affine___invert__, METH_VARARGS, NULL},
	 { (char *)"trans_affine___eq__", _wrap_trans_affine___eq__, METH_VARARGS, NULL},
	 { (char *)"trans_affine___ne__", _wrap_trans_affine___ne__, METH_VARARGS, NULL},
	 { (char *)"trans_affine_transform", _wrap_trans_affine_transform, METH_VARARGS, NULL},
	 { (char *)"trans_affine_inverse_transform", _wrap_trans_affine_inverse_transform, METH_VARARGS, NULL},
	 { (char *)"trans_affine_determinant", _wrap_trans_affine_determinant, METH_VARARGS, NULL},
	 { (char *)"trans_affine_scale", _wrap_trans_affine_scale, METH_VARARGS, NULL},
	 { (char *)"trans_affine_is_identity", _wrap_trans_affine_is_identity, METH_VARARGS, NULL},
	 { (char *)"trans_affine_is_equal", _wrap_trans_affine_is_equal, METH_VARARGS, NULL},
	 { (char *)"trans_affine_get_rotation", _wrap_trans_affine_get_rotation, METH_VARARGS, NULL},
	 { (char *)"trans_affine_get_translation", _wrap_trans_affine_get_translation, METH_VARARGS, NULL},
	 { (char *)"trans_affine_get_scaling", _wrap_trans_affine_get_scaling, METH_VARARGS, NULL},
	 { (char *)"delete_trans_affine", _wrap_delete_trans_affine, METH_VARARGS, NULL},
	 { (char *)"trans_affine_swigregister", trans_affine_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trans_affine_rotation", _wrap_new_trans_affine_rotation, METH_VARARGS, NULL},
	 { (char *)"delete_trans_affine_rotation", _wrap_delete_trans_affine_rotation, METH_VARARGS, NULL},
	 { (char *)"trans_affine_rotation_swigregister", trans_affine_rotation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trans_affine_scaling", _wrap_new_trans_affine_scaling, METH_VARARGS, NULL},
	 { (char *)"delete_trans_affine_scaling", _wrap_delete_trans_affine_scaling, METH_VARARGS, NULL},
	 { (char *)"trans_affine_scaling_swigregister", trans_affine_scaling_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trans_affine_translation", _wrap_new_trans_affine_translation, METH_VARARGS, NULL},
	 { (char *)"delete_trans_affine_translation", _wrap_delete_trans_affine_translation, METH_VARARGS, NULL},
	 { (char *)"trans_affine_translation_swigregister", trans_affine_translation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trans_affine_skewing", _wrap_new_trans_affine_skewing, METH_VARARGS, NULL},
	 { (char *)"delete_trans_affine_skewing", _wrap_delete_trans_affine_skewing, METH_VARARGS, NULL},
	 { (char *)"trans_affine_skewing_swigregister", trans_affine_skewing_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_path_storage", _wrap_delete_path_storage, METH_VARARGS, NULL},
	 { (char *)"new_path_storage", _wrap_new_path_storage, METH_VARARGS, NULL},
	 { (char *)"path_storage_remove_all", _wrap_path_storage_remove_all, METH_VARARGS, NULL},
	 { (char *)"path_storage_last_vertex", _wrap_path_storage_last_vertex, METH_VARARGS, NULL},
	 { (char *)"path_storage_prev_vertex", _wrap_path_storage_prev_vertex, METH_VARARGS, NULL},
	 { (char *)"path_storage_rel_to_abs", _wrap_path_storage_rel_to_abs, METH_VARARGS, NULL},
	 { (char *)"path_storage_move_to", _wrap_path_storage_move_to, METH_VARARGS, NULL},
	 { (char *)"path_storage_move_rel", _wrap_path_storage_move_rel, METH_VARARGS, NULL},
	 { (char *)"path_storage_line_to", _wrap_path_storage_line_to, METH_VARARGS, NULL},
	 { (char *)"path_storage_line_rel", _wrap_path_storage_line_rel, METH_VARARGS, NULL},
	 { (char *)"path_storage_arc_to", _wrap_path_storage_arc_to, METH_VARARGS, NULL},
	 { (char *)"path_storage_arc_rel", _wrap_path_storage_arc_rel, METH_VARARGS, NULL},
	 { (char *)"path_storage_curve3", _wrap_path_storage_curve3, METH_VARARGS, NULL},
	 { (char *)"path_storage_curve3_rel", _wrap_path_storage_curve3_rel, METH_VARARGS, NULL},
	 { (char *)"path_storage_curve4", _wrap_path_storage_curve4, METH_VARARGS, NULL},
	 { (char *)"path_storage_curve4_rel", _wrap_path_storage_curve4_rel, METH_VARARGS, NULL},
	 { (char *)"path_storage_end_poly", _wrap_path_storage_end_poly, METH_VARARGS, NULL},
	 { (char *)"path_storage_close_polygon", _wrap_path_storage_close_polygon, METH_VARARGS, NULL},
	 { (char *)"path_storage_add_poly", _wrap_path_storage_add_poly, METH_VARARGS, NULL},
	 { (char *)"path_storage_add_vertices", _wrap_path_storage_add_vertices, METH_VARARGS, NULL},
	 { (char *)"path_storage_start_new_path", _wrap_path_storage_start_new_path, METH_VARARGS, NULL},
	 { (char *)"path_storage_copy_from", _wrap_path_storage_copy_from, METH_VARARGS, NULL},
	 { (char *)"path_storage_total_vertices", _wrap_path_storage_total_vertices, METH_VARARGS, NULL},
	 { (char *)"path_storage_command", _wrap_path_storage_command, METH_VARARGS, NULL},
	 { (char *)"path_storage_rewind", _wrap_path_storage_rewind, METH_VARARGS, NULL},
	 { (char *)"path_storage_vertex", _wrap_path_storage_vertex, METH_VARARGS, NULL},
	 { (char *)"path_storage_arrange_orientations", _wrap_path_storage_arrange_orientations, METH_VARARGS, NULL},
	 { (char *)"path_storage_arrange_orientations_all_paths", _wrap_path_storage_arrange_orientations_all_paths, METH_VARARGS, NULL},
	 { (char *)"path_storage_flip_x", _wrap_path_storage_flip_x, METH_VARARGS, NULL},
	 { (char *)"path_storage_flip_y", _wrap_path_storage_flip_y, METH_VARARGS, NULL},
	 { (char *)"path_storage_add_vertex", _wrap_path_storage_add_vertex, METH_VARARGS, NULL},
	 { (char *)"path_storage_modify_vertex", _wrap_path_storage_modify_vertex, METH_VARARGS, NULL},
	 { (char *)"path_storage_modify_command", _wrap_path_storage_modify_command, METH_VARARGS, NULL},
	 { (char *)"path_storage_swigregister", path_storage_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_agg__trans_affine_scalingTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_scaling *) x));
}
static void *_p_agg__trans_affine_skewingTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_skewing *) x));
}
static void *_p_agg__trans_affine_translationTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_translation *) x));
}
static void *_p_agg__trans_affine_rotationTo_p_agg__trans_affine(void *x) {
    return (void *)((agg::trans_affine *)  ((agg::trans_affine_rotation *) x));
}
static swig_type_info _swigt__p_agg__path_storage = {"_p_agg__path_storage", "agg::path_storage *", 0, 0, 0};
static swig_type_info _swigt__p_agg__point_type = {"_p_agg__point_type", "agg::point_type *", 0, 0, 0};
static swig_type_info _swigt__p_agg__rect_baseTdouble_t = {"_p_agg__rect_baseTdouble_t", "agg::rect_base<double > *|agg::rect_d *", 0, 0, 0};
static swig_type_info _swigt__p_agg__rect_baseTint_t = {"_p_agg__rect_baseTint_t", "agg::rect_base<int > *|agg::rect *", 0, 0, 0};
static swig_type_info _swigt__p_agg__trans_affine = {"_p_agg__trans_affine", "agg::trans_affine *", 0, 0, 0};
static swig_type_info _swigt__p_agg__trans_affine_rotation = {"_p_agg__trans_affine_rotation", "agg::trans_affine_rotation *", 0, 0, 0};
static swig_type_info _swigt__p_agg__trans_affine_scaling = {"_p_agg__trans_affine_scaling", "agg::trans_affine_scaling *", 0, 0, 0};
static swig_type_info _swigt__p_agg__trans_affine_skewing = {"_p_agg__trans_affine_skewing", "agg::trans_affine_skewing *", 0, 0, 0};
static swig_type_info _swigt__p_agg__trans_affine_translation = {"_p_agg__trans_affine_translation", "agg::trans_affine_translation *", 0, 0, 0};
static swig_type_info _swigt__p_agg__vertex_type = {"_p_agg__vertex_type", "agg::vertex_type *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|agg::int32 *", 0, 0, 0};
static swig_type_info _swigt__p_self_type = {"_p_self_type", "self_type *", 0, 0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|agg::int16 *", 0, 0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|agg::int8 *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|agg::cover_type *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|agg::int32u *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|agg::int16u *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_agg__path_storage,
  &_swigt__p_agg__point_type,
  &_swigt__p_agg__rect_baseTdouble_t,
  &_swigt__p_agg__rect_baseTint_t,
  &_swigt__p_agg__trans_affine,
  &_swigt__p_agg__trans_affine_rotation,
  &_swigt__p_agg__trans_affine_scaling,
  &_swigt__p_agg__trans_affine_skewing,
  &_swigt__p_agg__trans_affine_translation,
  &_swigt__p_agg__vertex_type,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_self_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_agg__path_storage[] = {  {&_swigt__p_agg__path_storage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__point_type[] = {  {&_swigt__p_agg__point_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__rect_baseTdouble_t[] = {  {&_swigt__p_agg__rect_baseTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__rect_baseTint_t[] = {  {&_swigt__p_agg__rect_baseTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__trans_affine[] = {  {&_swigt__p_agg__trans_affine_scaling, _p_agg__trans_affine_scalingTo_p_agg__trans_affine, 0, 0},  {&_swigt__p_agg__trans_affine, 0, 0, 0},  {&_swigt__p_agg__trans_affine_skewing, _p_agg__trans_affine_skewingTo_p_agg__trans_affine, 0, 0},  {&_swigt__p_agg__trans_affine_translation, _p_agg__trans_affine_translationTo_p_agg__trans_affine, 0, 0},  {&_swigt__p_agg__trans_affine_rotation, _p_agg__trans_affine_rotationTo_p_agg__trans_affine, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__trans_affine_rotation[] = {  {&_swigt__p_agg__trans_affine_rotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__trans_affine_scaling[] = {  {&_swigt__p_agg__trans_affine_scaling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__trans_affine_skewing[] = {  {&_swigt__p_agg__trans_affine_skewing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__trans_affine_translation[] = {  {&_swigt__p_agg__trans_affine_translation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agg__vertex_type[] = {  {&_swigt__p_agg__vertex_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_self_type[] = {  {&_swigt__p_self_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_agg__path_storage,
  _swigc__p_agg__point_type,
  _swigc__p_agg__rect_baseTdouble_t,
  _swigc__p_agg__rect_baseTint_t,
  _swigc__p_agg__trans_affine,
  _swigc__p_agg__trans_affine_rotation,
  _swigc__p_agg__trans_affine_scaling,
  _swigc__p_agg__trans_affine_skewing,
  _swigc__p_agg__trans_affine_translation,
  _swigc__p_agg__vertex_type,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_self_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        int i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData() {
        int i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"cover_shift", SWIG_From_int((int)(agg::cover_shift))); 
    }
    {
        PyDict_SetItemString(d,"cover_size", SWIG_From_int((int)(agg::cover_size))); 
    }
    {
        PyDict_SetItemString(d,"cover_mask", SWIG_From_int((int)(agg::cover_mask))); 
    }
    {
        PyDict_SetItemString(d,"cover_none", SWIG_From_int((int)(agg::cover_none))); 
    }
    {
        PyDict_SetItemString(d,"cover_full", SWIG_From_int((int)(agg::cover_full))); 
    }
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"pi",_wrap_pi_get, _wrap_pi_set);
    {
        PyDict_SetItemString(d,"path_cmd_stop", SWIG_From_int((int)(agg::path_cmd_stop))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_move_to", SWIG_From_int((int)(agg::path_cmd_move_to))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_line_to", SWIG_From_int((int)(agg::path_cmd_line_to))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_curve3", SWIG_From_int((int)(agg::path_cmd_curve3))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_curve4", SWIG_From_int((int)(agg::path_cmd_curve4))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_end_poly", SWIG_From_int((int)(agg::path_cmd_end_poly))); 
    }
    {
        PyDict_SetItemString(d,"path_cmd_mask", SWIG_From_int((int)(agg::path_cmd_mask))); 
    }
    {
        PyDict_SetItemString(d,"path_flags_none", SWIG_From_int((int)(agg::path_flags_none))); 
    }
    {
        PyDict_SetItemString(d,"path_flags_ccw", SWIG_From_int((int)(agg::path_flags_ccw))); 
    }
    {
        PyDict_SetItemString(d,"path_flags_cw", SWIG_From_int((int)(agg::path_flags_cw))); 
    }
    {
        PyDict_SetItemString(d,"path_flags_close", SWIG_From_int((int)(agg::path_flags_close))); 
    }
    {
        PyDict_SetItemString(d,"path_flags_mask", SWIG_From_int((int)(agg::path_flags_mask))); 
    }
}

