from matplotlib.testing.noseclasses import KnownFailureTest, \
     KnownFailureDidNotFailTest, ImageComparisonFailure
import os, sys
import nose
import matplotlib.tests
from matplotlib.testing.compare import compare_images

def knownfailureif(fail_condition, msg=None):
    """

    Assume a will fail if *fail_condition* is True. *fail_condition*
    may also be False or the string 'indeterminate'.

    *msg* is the error message displayed for the test.

    """
    # based on numpy.testing.dec.knownfailureif
    if msg is None:
        msg = 'Test known to fail'
    def known_fail_decorator(f):
        # Local import to avoid a hard nose dependency and only incur the
        # import time overhead at actual test-time.
        import nose
        def failer(*args, **kwargs):
            try:
                # Always run the test (to generate images).
                result = f(*args, **kwargs)
            except:
                if fail_condition:
                    raise KnownFailureTest(msg) # An error here when running nose means that you don't have the matplotlib.testing.noseclasses:KnownFailure plugin in use.
                else:
                    raise
            if fail_condition and fail_condition != 'indeterminate':
                raise KnownFailureDidNotFailTest(msg)
            return result
        return nose.tools.make_decorator(f)(failer)
    return known_fail_decorator

def image_comparison(baseline_images=None):
    """
    compare images generated by the test with those specified in
    *baseline_images*, which must correspond within tolerance *tol*,
    else an ImageComparisonFailure exception will be raised.

    """

    if baseline_images is None:
        raise ValueError('baseline_images must be specified')
    def compare_images_decorator(func):
        def decorated_compare_images(*args,**kwargs):
            result = func(*args,**kwargs)
            extension = '.png' # TODO: test more backends
            for fname in baseline_images:
                actual = fname + extension

                # compute filename for baseline image
                module_name = func.__module__
                mods = module_name.split('.')
                assert mods.pop(0)=='matplotlib'
                assert mods.pop(0)=='tests'
                subdir = '/'.join(mods)
                basedir = os.path.dirname(matplotlib.tests.__file__)
                baseline_dir = os.path.join(basedir,'baseline_images',subdir)
                expected = os.path.join(baseline_dir,fname) + extension

                # compare the images
                tol=1e-3 # default tolerance
                err = compare_images( expected, actual, tol,
                                      in_decorator=True )
                if err:
                    raise ImageComparisonFailure(
                        'images not close: %(actual)s vs. %(expected)s '
                        '(RMS %(rms).3f)'%err)
            return result
        return nose.tools.make_decorator(func)(decorated_compare_images)
    return compare_images_decorator
