### MATPLOTLIBRC FORMAT

# This is a sample matplotlib configuration file.  It should be placed
# in HOME/.matplotlib/matplotlibrc (unix/linux like systems) and
# C:\Documents and Settings\yourname\.matplotlib (win32 systems)
#
# By default, the installer will overwrite the existing file in the
# install path, so if you want to preserve your's, please move it to
# your HOME dir and set the environment variable if necessary.
#
# This file is best viewed in a editor which supports ini or conf mode
# syntax highlighting
#
# Blank lines, or lines starting with a comment symbol, are ignored,
# as are trailing comments.  Other lines must have the format
#
#   key = val   # optional comment
#
# val should be valid python syntax, just as you would use when setting
# properties using rcParams. This should become more obvious by inspecting 
# the default values listed herein.
#
# Colors: for the color values below, you can either use
#  - a matplotlib color string, such as r, k, or b
#  - an rgb tuple, such as (1.0, 0.5, 0.0)
#  - a hex string, such as #ff00ff or ff00ff
#  - a scalar grayscale intensity such as 0.75
#  - a legal html color name, eg red, blue, darkslategray

#### CONFIGURATION BEGINS HERE

# numpy, Numeric or numarray
numerix = 'numpy'

# True to use external maskedarray module instead of numpy.ma; this is a 
# temporary setting for testing maskedarray.
maskedarray = False

# see http://matplotlib.sourceforge.net/interactive.html
interactive = False

# None | classic | toolbar2
toolbar = 'toolbar2'

# a pytz timezone string, eg US/Central or Europe/Paris
timezone = 'UTC'

units = False

# Where your matplotlib data lives if you installed to a non-default 
#location.  This is where the matplotlib fonts, bitmaps, etc reside
datapath = '/home/fperez/.matplotlib'

#bogus = 1
#[bogus_section]
#  foo = 1

[backend]
    
    #[[bogus_subsection]]
    #  bar  =1
    
    # 'GTKAgg', 'GTKCairo', 'QtAgg', 'Qt4Agg', 'TkAgg', 'Agg', 
    # 'Cairo', 'PS', 'PDF', 'SVG'
    use = 'Qt4Agg'
    
    [[cairo]]
        # png, ps, pdf, svg
        format = 'png'
    
    [[tk]]
        # Maintain shell focus for TkAgg
        window_focus = False
        
        # tk sets PYTHONINSEPCT
        pythoninspect = False
    
    [[ps]]
        # auto, letter, legal, ledger, A0-A10, B0-B10
        papersize = 'letter'
        
        # use of afm fonts, results in smaller files
        useafm = False
        
        # 3 (Type3) or 42 (TrueType)
        fonttype = 3
        
        [[[distiller]]]
            # can be: None, ghostscript or xpdf
            # xpdf intended for production of publication quality 
            # files, but requires ghostscript, xpdf and ps2eps
            use = None
            
            # distiller resolution, dpi
            resolution = 6000.0
    
    [[pdf]]
        # integer from 0 to 9
        # 0 disables compression (good for debugging)
        compression = 6
        
        # 3 (Type3) or 42 (TrueType)
        fonttype = 3
    
    [[svg]]
        # write raster image data directly into the svg file
        image_inline = True
        
        # suppress scaling of raster data embedded in SVG
        image_noscale = False
        
        # embed character outlines in the SVG file
        embed_chars = False

[lines]
    # See http://matplotlib.sourceforge.net/matplotlib.lines.html for more
    # information on line properties.
    
    # line width in points
    linewidth = 1.0
    
    # '-','--','-.', ':', 'steps', '', ' ', or None
    linestyle = '-'
    
    color = 'blue'
    
    # The default marker: None, 'o', '.', ',', '^', 'v', '<', '>', 's', '+',
    # 'x', 'D', 'd', '1', '2', '3', '4', 'h', 'H', 'p', '|', '_'
    marker = None
    
    # the line width around the marker symbol
    markeredgewidth = 0.5
    
    # markersize, in points
    markersize = 6.0
    
    # miter|round|bevel
    dash_joinstyle = 'miter'
    solid_joinstyle = 'miter'
    
    # butt|round|projecting
    dash_capstyle = 'butt'
    solid_capstyle = 'projecting'
    
    # render antialised lines (no jaggies)
    antialiased = True

[patch]
    # Patches are graphical objects that fill 2D space, like polygons or
    # circles.  See
    # http://matplotlib.sourceforge.net/matplotlib.patches.html for more
    # information on patch properties
    
    # edge width in points
    linewidth = 1.0
    
    facecolor = 'blue'
    edgecolor = 'black'
    
    # render antialised lines (no jaggies)
    antialiased = True

[font]
    # font properties used by text.Text.  See
    # http://matplotlib.sourceforge.net/matplotlib.font_manager.html for more
    # information on font properties.  The 6 font properties used for font
    # matching are given below with their default values.
    #
    # The font.family property has five values: 'serif' (e.g. Times),
    # 'sans-serif' (e.g. Helvetica), 'cursive' (e.g. Zapf-Chancery),
    # 'fantasy' (e.g. Western), and 'monospace' (e.g. Courier).  Each of
    # these font families has a default list of font names in decreasing
    # order of priority associated with them.
    family = 'sans-serif'
    
    # The font.style property has three values: normal (or roman), italic
    # or oblique.  The oblique style will be used for italic, if it is not
    # present.
    style = 'normal'
    
    # The font.variant property has two values: normal or small-caps.  For
    # TrueType fonts, which are scalable fonts, small-caps is equivalent
    # to using a font size of 'smaller', or about 83% of the current font
    # size.
    variant = 'normal'
    
    # The font.weight property has effectively 13 values= normal, bold,
    # bolder, lighter, 100, 200, 300, ..., 900.  Normal is the same as
    # 400, and bold is 700.  bolder and lighter are relative values with
    # respect to the current weight.
    weight = 'normal'
    
    # The font.stretch property has 11 values: ultra-condensed,
    # extra-condensed, condensed, semi-condensed, normal, semi-expanded,
    # expanded, extra-expanded, ultra-expanded, wider, and narrower.  This
    # property is not currently implemented.
    stretch = 'normal'
    
    # The font.size property is the default font size for text, given in pts.
    # 12pt is the standard value.
    #
    # Note that font.size controls default text sizes.  To configure
    # special text sizes tick labels, axes, labels, title, etc, see the rc
    # settings for axes and ticks. Special text sizes can be defined
    # relative to font.size, using the following values: xx-small, x-small,
    # small, medium, large, x-large, xx-large, larger, or smaller
    size = 12.0
    
    # A search list for each of the font families
    serif = ['Bitstream Vera Serif', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif']
    sans_serif = ['Bitstream Vera Sans', 'Lucida Grande', 'Verdana', 'Geneva', 'Lucid', 'Arial', 'Helvetica', 'Avant Garde', 'sans-serif']
    cursive = ['Apple Chancery', 'Textile', 'Zapf Chancery', 'Sand', 'cursive']
    fantasy = ['Comic Sans MS', 'Chicago', 'Charcoal', 'Impact', 'Western', 'fantasy']
    monospace = ['Bitstream Vera Sans Mono', 'Andale Mono', 'Nimbus Mono L', 'Courier New', 'Courier', 'Fixed', 'Terminal', 'monospace']

[text]
    # text properties used by text.Text.  See
    # http://matplotlib.sourceforge.net/matplotlib.text.html for more
    # information on text properties
    color = 'black'
    
    ### LaTeX customizations
    # See http://www.scipy.org/Wiki/Cookbook/Matplotlib/UsingTex
    
    # use latex for all text handling. The following fonts
    # are supported through the usual rc parameter settings:
    # new century schoolbook, bookman, times, palatino,
    # zapf chancery, charter, serif, sans-serif, helvetica,
    # avant garde, courier, monospace, computer modern roman,
    # computer modern sans serif, computer modern typewriter
    # If another font is desired which can loaded using the
    # LaTeX \usepackage command, please inquire at the
    # matplotlib mailing list
    usetex = False
    
    [[latex]]
        # use "ucs" and "inputenc" LaTeX packages for 
        # handling unicode strings.
        unicode = False
        
        # IMPROPER USE OF THE PREAMBLE WILL LEAD TO LATEX 
        # FAILURES AND IS THEREFORE UNSUPPORTED. PLEASE DO NOT 
        # ASK FOR HELP IF THIS FEATURE DOES NOT DO WHAT YOU 
        # EXPECT IT TO.
        # preamble is a comma separated list of LaTeX
        # statements that are included in the LaTeX document 
        # preamble.
        # An example:
        # text.latex.preamble = ["\usepackage{bm}", "\usepackage{euler}"]
        # The following packages are always loaded with usetex,
        # so beware of package collisions: color, geometry, 
        # graphicx, type1cm, textcomp. Adobe Postscript 
        # (PSSNFS) font packages may also be loaded, depending
        # on your font settings
        preamble = []
        
        # some versions of dvipng don't handle alpha channel properly.
        # Use True to correct and flush ~/.matplotlib/tex.cache before 
        # testing
        dvipnghack = False

[axes]
    # default face and edge color, default tick sizes,
    # default fontsizes for ticklabels, and so on.  See
    # http://matplotlib.sourceforge.net/matplotlib.axes.html#Axes
    
    # whether to clear the axes by default
    hold = True
    
    # axes background color
    facecolor = 'white'
    
    # axes edge color
    edgecolor = 'black'
    
    # edge linewidth
    linewidth = 1.0
    
    # display grid on regular or polar axes
    grid = False
    polargrid = True
    
    # fontsize of the axes title and labels
    titlesize = 'large'
    labelsize = 'medium'
    
    labelcolor = 'black'
    
    # whether axis gridlines and ticks are below the axes elements 
    # (lines, text, etc)
    axisbelow = False
    
    [[formatter]]
        # use scientific notation if log10 of the axis range is smaller 
        # than the first or larger than the second
        limits = [-7.0, 7.0]

[xticks]
    # see http://matplotlib.sourceforge.net/matplotlib.axis.html#Ticks
    color = 'k'
    labelsize = 'small'
    
    # direction: in or out
    direction = 'in'
    
    [[major]]
        # in points
        size = 4.0
        pad = 4.0
    
    [[minor]]
        # in points
        size = 2.0
        pad = 4.0

[yticks]
    color = 'k'
    labelsize = 'small'
    
    # direction: in or out
    direction = 'in'
    
    [[major]]
        # in points
        size = 4.0
        pad = 4.0
    
    [[minor]]
        # in points
        size = 2.0
        pad = 4.0

[grid]
    color = 'black'
    
    # '-','--','-.', ':', 'steps', '', ' ', or None
    linestyle = ':'
    
    linewidth = 0.5

[legend]
    loc = 'upper right'
    
    isaxes = True
    
    # the number of points in the legend line
    numpoints = 2
    
    fontsize = 'medium'
    
    # the fractional whitespace inside the legend border
    pad = 0.20000000000000001
    
    # the relative size of legend markers vs. original
    # the following dimensions are in axes coords
    markerscale = 1.0
    
    # the vertical space between the legend entries
    labelsep = 0.01
    
    # the length of the legend lines
    handlelen = 0.050000000000000003
    
    # the space between the legend line and legend text
    handletextsep = 0.02
    
    # the border between the axes and legend edge
    axespad = 0.02
    
    # Show a shadow behind the legend
    shadow = False

[figure]
    # See http://matplotlib.sourceforge.net/matplotlib.figure.html#Figure
    
    # figure size in inches
    figsize = [8.0, 6.0]
    
    # figure dots per inch
    dpi = 80.0
    
    # figure face and edge colors; '0.75' is scalar gray
    facecolor = '0.75'
    edgecolor = 'white'
    
    [[subplot]]
        # The figure subplot parameters.  All dimensions are fraction of the
        # figure width or height
        left = 0.125
        right = 0.90000000000000002
        bottom = 0.10000000000000001
        top = 0.90000000000000002
        
        # the amount of width or height reserved for blank space between 
        #subplots
        wspace = 0.20000000000000001
        hspace = 0.20000000000000001


[image]
    # equal | auto | a number
    aspect = 'equal'
    
    # see help(imshow) for options
    interpolation = 'bilinear'
    cmap = 'jet'
    
    # the size of the colormap lookup table
    lut = 256
    
    # 'lower' or 'upper'
    origin = 'upper'


[contour]
    # 'dashed' or 'solid'
    negative_linestyle = 'dashed'

[savefig]
    # Saving figures
    # the default savefig params can be different for the GUI backends.
    # Eg, you may want a higher resolution, or to make the figure
    # background white
    
    # figure dots per inch
    dpi = 100.0
    
    # figure face and edge colors
    facecolor = 'white'
    edgecolor = 'white'
    orientation = 'portrait'

[verbose]
    # Set the verbose flags.  This controls how much information
    # matplotlib gives you at runtime and where it goes.  The verbosity
    # levels are: silent, helpful, debug, debug-annoying.  Any level is
    # inclusive of all the levels below it.  If you setting is debug,
    # you'll get all the debug and helpful messages.  When submitting
    # problems to the mailing-list, please set verbose to helpful or debug
    # and paste the output into your report.
    #
    # The fileo gives the destination for any calls to verbose.report.
    # These objects can a filename, or a filehandle like sys.stdout.
    #
    # You can override the rc default verbosity from the command line by
    # giving the flags --verbose-LEVEL where LEVEL is one of the legal
    # levels, eg --verbose-helpful.
    #
    # You can access the verbose instance in your code
    #   from matplotlib import verbose.
    
    # 'silent', 'helpful', 'debug', or 'debug-annoying'
    level = 'silent'
    
    # a log filename, 'sys.stdout' or 'sys.stderr'
    fileo = 'sys.stdout'